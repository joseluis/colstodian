var searchIndex = JSON.parse('{\
"bytemuck":{"doc":"This crate gives small utilities for casting between …","t":[13,8,16,18,18,18,18,13,8,4,13,13,8,8,11,11,5,5,5,5,5,5,5,11,11,11,11,11,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AlignmentMismatch","Contiguous","Int","MAX_VALUE","MAX_VALUE","MIN_VALUE","MIN_VALUE","OutputSliceWouldHaveSlop","Pod","PodCastError","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","eq","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","peel","peel","peel_mut","peel_mut","peel_ref","peel_ref","peel_slice","peel_slice","peel_slice_mut","peel_slice_mut","pod_align_to","pod_align_to_mut","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","type_id","wrap","wrap","wrap_mut","wrap_mut","wrap_ref","wrap_ref","wrap_slice","wrap_slice","wrap_slice_mut","wrap_slice_mut","zeroed","zeroed"],"q":["bytemuck","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["For this type of cast the alignments must be exactly the …","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this …","The upper <em>inclusive</em> bound for valid instances of this …","The lower <em>inclusive</em> bound for valid instances of this …","The lower <em>inclusive</em> bound for valid instances of this …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between [<code>Pod</code>] …","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a …","A trait which indicates that a type is a …","Trait for types that can be safely created with <code>zeroed</code>.","","","Re-interprets <code>&T</code> as <code>&[u8]</code>.","Re-interprets <code>&mut T</code> as <code>&mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&mut T</code> into <code>&mut U</code>.","Cast <code>&T</code> into <code>&U</code>.","Cast <code>&[A]</code> into <code>&[B]</code>.","Cast <code>&mut [T]</code> into <code>&mut [U]</code>.","","","","","","Re-interprets <code>&[u8]</code> as <code>&T</code>.","Re-interprets <code>&mut [u8]</code> as <code>&mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","","Perform the conversion from <code>C</code> into the underlying …","Perform the conversion from <code>C</code> into the underlying …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Convert the wrapper type into the inner type.","Convert the wrapper type into the inner type.","Convert a mutable reference to the wrapper type into a …","Convert a mutable reference to the wrapper type into a …","Convert a reference to the wrapper type into a reference …","Convert a reference to the wrapper type into a reference …","Convert a slice to the wrapped type into a slice to the …","Convert a slice to the wrapped type into a slice to the …","Convert a mutable slice to the wrapped type into a …","Convert a mutable slice to the wrapped type into a …","As <code>align_to</code>, but safe because of the [<code>Pod</code>] bound.","As <code>align_to_mut</code>, but safe because of the [<code>Pod</code>] bound.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&mut T</code> into <code>&mut U</code>.","Try to convert a <code>&T</code> into <code>&U</code>.","Try to convert <code>&[A]</code> into <code>&[B]</code> (possibly with a change in …","Try to convert <code>&mut [A]</code> into <code>&mut [B]</code> (possibly with a …","","Re-interprets <code>&[u8]</code> as <code>&T</code>.","Re-interprets <code>&mut [u8]</code> as <code>&mut T</code>.","","","Convert the inner type into the wrapper type.","Convert the inner type into the wrapper type.","Convert a mutable reference to the inner type into a …","Convert a mutable reference to the inner type into a …","Convert a reference to the inner type into a reference to …","Convert a reference to the inner type into a reference to …","Convert a slice to the inner type into a slice to the …","Convert a slice to the inner type into a slice to the …","Convert a mutable slice to the inner type into a mutable …","Convert a mutable slice to the inner type into a mutable …","Calls <code>zeroed</code>.","Calls <code>zeroed</code>."],"i":[1,0,2,2,2,2,2,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,2,2,1,1,2,2,0,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,1,0,0,1,1,3,3,3,3,3,3,3,3,3,3,4,4],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["pod",8]],["pod",8]],[[]],[[]],[[]],[[]],[[],["podcasterror",4]],[[["podcasterror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pod",8]],[["pod",8],["podcasterror",4],["result",4]]],[[],[["result",4],["podcasterror",4]]],[[],[["podcasterror",4],["result",4]]],[[],[["result",4],["podcasterror",4]]],[[],[["podcasterror",4],["result",4]]],[[],["result",4]],[[],[["podcasterror",4],["result",4]]],[[],[["result",4],["podcasterror",4]]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"PodCastError"],[8,"Contiguous"],[8,"TransparentWrapper"],[8,"Zeroable"]]},\
"cint":{"doc":"<code>cint</code> - <code>c</code>olor <code>int</code>erop","tn":["Aces2065","AcesCc","AcesCct","AcesCg","Alpha","Bt2020","Bt2100","CieLCh","CieLab","CieXYZ","CintTy","ColorInterop","ColorStruct","ComponentTy","DciP3","DciXYZPrime","DisplayP3","EncodedBt2020","EncodedBt2100HLG","EncodedBt2100PQ","EncodedDisplayP3","EncodedRec709","EncodedSrgb","GenericColor","Hsl","Hsv","ICtCpHLG","ICtCpPQ","LinearSrgb","Oklab","Oklch","PremultipliedAlpha","Rec709","a","a","alpha","alpha","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","c","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","color","color","comp1","comp2","comp3","cp","cp","ct","ct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cint","g","g","g","g","g","g","g","g","g","g","g","g","g","g","g","g","h","h","h","h","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i","i","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_cint","l","l","l","l","l","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","r","r","r","r","r","r","r","r","r","r","r","r","r","r","s","s","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","v","x","x","y","y","z","z"],"q":["cint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A color in the ACES 2065-1 color space.","A color in the ACEScc color space.","A color in the ACEScct color space.","A color in the ACEScg color space.","A color with an alpha component.","A color in the BT.2020 color space.","A color in the BT.2100 color space.","A color in the CIE L*C*h° color space.","A color in the CIE L*a*b* color space.","A color in the CIE XYZ color space.","","A trait that should be implemented by provider crates on …","A trait used to simpify the interface of the [<code>Alpha</code>] and […","","A color in the DCI-P3 (aka P3 DCI and P3 D60) color space.","A color in the X’Y’Z’ color space, a DCI …","A color in the Display P3 (aka P3 D65) color space.","A color in the encoded BT.2020 color space.","A color in the encoded BT.2100 color space with HLG …","A color in the encoded BT.2100 color space with PQ …","A color in the Display P3 (aka P3 D65) color space.","A color in the encoded Rec.709/BT.709 color space.","A color in the encoded sRGB color space.","A color in a generic color space that can be represented …","A color in the HSL color space.","A color in the HSV color space.","A color in the ICtCp color space with HLG (Hybrid …","A color in the ICtCp color space with PQ (Perceptual …","A color in the linear (decoded) sRGB color space.","A color in the Oklab color space.","A color in the Oklch color space (a transformation from …","A premultiplied color with an alpha component.","A color in the Rec.709/BT.709 color space.","The a component, representing green-red chroma difference.","The a component, representing green-red chroma difference.","The alpha component.","The alpha component.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The b component, representing blue-yellow chroma …","The b component, representing blue-yellow chroma …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The C (chroma) component. Varies from 0 to a hue …","The C (chroma) component. Varies from 0 to a hue …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The contained color, which is completely separate from …","The contained color, which has been premultiplied with …","The first component.","The second component.","The third component.","The Cp (chroma-protan) component.","The Cp (chroma-protan) component.","The Ct (chroma-tritan) component.","The Ct (chroma-tritan) componentonvert <code>self</code> into its canonical <code>cint</code> type.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The h (hue) component. Varies from -PI to PI.","The h (hue) component. Varies from -PI to PI.","The H (hue) component. Varies from 0 to 1.","The H (hue) component. Varies from 0 to 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The I (intensity) component.","The I (intensity) component.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>Self</code> from its canonical <code>cint</code> type.","The L (lightness) component. Varies from 0 to 100.","The L (lightness) component. Varies from 0 to 100.","The L (lightness) component. Varies from 0 to 1","The L (lightness) component. Varies from 0 to 1.","The L (lightness) component. Varies from 0 to 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The S (saturation) component. Varies from 0 to 1.","The S (saturation) component. Varies from 0 to 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The V (value) component. Varies from 0 to 1.","The X’ component.","The X component.","The Y’ component.","The Y component.","The Z’ component.","The Z component."],"i":[0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,7,8,9,10,12,13,14,15,16,17,18,20,21,22,23,24,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,28,29,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,5,6,11,11,11,25,26,25,26,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,3,3,3,3,28,28,28,28,4,4,4,4,29,29,29,29,30,30,30,30,31,31,31,31,1,7,8,9,10,12,13,14,15,16,17,18,20,21,22,23,24,28,29,30,31,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,25,26,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,3,3,28,28,4,4,29,29,30,30,31,31,1,3,28,4,29,30,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,7,8,9,10,12,13,14,15,16,17,18,20,21,22,23,24,30,31,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3,28,4,29,30,31,31,19,27,19,27,19,27],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["alpha",3]],[[],["premultipliedalpha",3]],[[],["encodedsrgb",3]],[[],["linearsrgb",3]],[[],["encodedrec709",3]],[[],["rec709",3]],[[],["genericcolor",3]],[[],["acescg",3]],[[],["aces2065",3]],[[],["acescc",3]],[[],["acescct",3]],[[],["displayp3",3]],[[],["encodeddisplayp3",3]],[[],["dcip3",3]],[[],["dcixyzprime",3]],[[],["bt2020",3]],[[],["encodedbt2020",3]],[[],["bt2100",3]],[[],["encodedbt2100pq",3]],[[],["encodedbt2100hlg",3]],[[],["ictcppq",3]],[[],["ictcphlg",3]],[[],["ciexyz",3]],[[],["cielab",3]],[[],["cielch",3]],[[],["oklab",3]],[[],["oklch",3]],[[],["hsl",3]],[[],["hsv",3]],[[["alpha",3]],["ordering",4]],[[["premultipliedalpha",3]],["ordering",4]],[[["encodedsrgb",3]],["ordering",4]],[[["linearsrgb",3]],["ordering",4]],[[["encodedrec709",3]],["ordering",4]],[[["rec709",3]],["ordering",4]],[[["genericcolor",3]],["ordering",4]],[[["acescg",3]],["ordering",4]],[[["aces2065",3]],["ordering",4]],[[["acescc",3]],["ordering",4]],[[["acescct",3]],["ordering",4]],[[["displayp3",3]],["ordering",4]],[[["encodeddisplayp3",3]],["ordering",4]],[[["dcip3",3]],["ordering",4]],[[["dcixyzprime",3]],["ordering",4]],[[["bt2020",3]],["ordering",4]],[[["encodedbt2020",3]],["ordering",4]],[[["bt2100",3]],["ordering",4]],[[["encodedbt2100pq",3]],["ordering",4]],[[["encodedbt2100hlg",3]],["ordering",4]],[[["ictcppq",3]],["ordering",4]],[[["ictcphlg",3]],["ordering",4]],[[["ciexyz",3]],["ordering",4]],[[["cielab",3]],["ordering",4]],[[["cielch",3]],["ordering",4]],[[["oklab",3]],["ordering",4]],[[["oklch",3]],["ordering",4]],[[["hsl",3]],["ordering",4]],[[["hsv",3]],["ordering",4]],null,null,null,null,null,null,null,null,null,[[["alpha",3]],["bool",15]],[[["premultipliedalpha",3]],["bool",15]],[[["encodedsrgb",3]],["bool",15]],[[["linearsrgb",3]],["bool",15]],[[["encodedrec709",3]],["bool",15]],[[["rec709",3]],["bool",15]],[[["genericcolor",3]],["bool",15]],[[["acescg",3]],["bool",15]],[[["aces2065",3]],["bool",15]],[[["acescc",3]],["bool",15]],[[["acescct",3]],["bool",15]],[[["displayp3",3]],["bool",15]],[[["encodeddisplayp3",3]],["bool",15]],[[["dcip3",3]],["bool",15]],[[["dcixyzprime",3]],["bool",15]],[[["bt2020",3]],["bool",15]],[[["encodedbt2020",3]],["bool",15]],[[["bt2100",3]],["bool",15]],[[["encodedbt2100pq",3]],["bool",15]],[[["encodedbt2100hlg",3]],["bool",15]],[[["ictcppq",3]],["bool",15]],[[["ictcphlg",3]],["bool",15]],[[["ciexyz",3]],["bool",15]],[[["cielab",3]],["bool",15]],[[["cielch",3]],["bool",15]],[[["oklab",3]],["bool",15]],[[["oklch",3]],["bool",15]],[[["hsl",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["alpha",3],["oklab",3]]],[[],[["encodedsrgb",3],["alpha",3]]],[[],[["encodedrec709",3],["alpha",3]]],[[],[["alpha",3],["genericcolor",3]]],[[],[["alpha",3],["aces2065",3]]],[[],[["alpha",3],["acescct",3]]],[[],[["alpha",3],["encodedbt2100pq",3]]],[[],[["alpha",3],["linearsrgb",3]]],[[],[["alpha",3],["oklch",3]]],[[],[["rec709",3],["alpha",3]]],[[],[["alpha",3],["displayp3",3]]],[[],[["acescc",3],["alpha",3]]],[[],[["alpha",3],["encodeddisplayp3",3]]],[[],[["acescg",3],["alpha",3]]],[[],[["dcip3",3],["alpha",3]]],[[],[["alpha",3],["dcixyzprime",3]]],[[],[["alpha",3],["encodedbt2100hlg",3]]],[[],[["bt2020",3],["alpha",3]]],[[],[["alpha",3],["hsv",3]]],[[],[["encodedbt2020",3],["alpha",3]]],[[],[["alpha",3],["ictcppq",3]]],[[],[["ictcphlg",3],["alpha",3]]],[[],[["alpha",3],["ciexyz",3]]],[[],[["alpha",3],["cielab",3]]],[[],[["alpha",3],["cielch",3]]],[[],[["bt2100",3],["alpha",3]]],[[]],[[],[["hsl",3],["alpha",3]]],[[],[["acescct",3],["premultipliedalpha",3]]],[[],[["dcip3",3],["premultipliedalpha",3]]],[[],[["premultipliedalpha",3],["ictcphlg",3]]],[[],[["premultipliedalpha",3],["cielch",3]]],[[],[["premultipliedalpha",3],["ictcppq",3]]],[[]],[[],[["premultipliedalpha",3],["ciexyz",3]]],[[],[["premultipliedalpha",3],["encodedbt2100pq",3]]],[[],[["displayp3",3],["premultipliedalpha",3]]],[[],[["premultipliedalpha",3],["oklch",3]]],[[],[["premultipliedalpha",3],["bt2100",3]]],[[],[["premultipliedalpha",3],["encodedbt2100hlg",3]]],[[],[["hsl",3],["premultipliedalpha",3]]],[[],[["dcixyzprime",3],["premultipliedalpha",3]]],[[],[["hsv",3],["premultipliedalpha",3]]],[[],[["premultipliedalpha",3],["aces2065",3]]],[[],[["bt2020",3],["premultipliedalpha",3]]],[[],[["premultipliedalpha",3],["encodedsrgb",3]]],[[],[["acescg",3],["premultipliedalpha",3]]],[[],[["genericcolor",3],["premultipliedalpha",3]]],[[],[["premultipliedalpha",3],["encodedbt2020",3]]],[[],[["premultipliedalpha",3],["linearsrgb",3]]],[[],[["rec709",3],["premultipliedalpha",3]]],[[],[["premultipliedalpha",3],["acescc",3]]],[[],[["cielab",3],["premultipliedalpha",3]]],[[],[["encodedrec709",3],["premultipliedalpha",3]]],[[],[["premultipliedalpha",3],["oklab",3]]],[[],[["encodeddisplayp3",3],["premultipliedalpha",3]]],[[]],[[["premultipliedalpha",3],["encodedsrgb",3]],["encodedsrgb",3]],[[["alpha",3],["encodedsrgb",3]],["encodedsrgb",3]],[[],["encodedsrgb",3]],[[["premultipliedalpha",3],["linearsrgb",3]],["linearsrgb",3]],[[]],[[["alpha",3],["linearsrgb",3]],["linearsrgb",3]],[[],["linearsrgb",3]],[[["encodedrec709",3],["premultipliedalpha",3]],["encodedrec709",3]],[[["encodedrec709",3],["alpha",3]],["encodedrec709",3]],[[],["encodedrec709",3]],[[]],[[],["rec709",3]],[[["rec709",3],["premultipliedalpha",3]],["rec709",3]],[[["rec709",3],["alpha",3]],["rec709",3]],[[]],[[],["genericcolor",3]],[[["genericcolor",3],["premultipliedalpha",3]],["genericcolor",3]],[[["alpha",3],["genericcolor",3]],["genericcolor",3]],[[]],[[]],[[],["acescg",3]],[[["acescg",3],["alpha",3]],["acescg",3]],[[["acescg",3],["premultipliedalpha",3]],["acescg",3]],[[],["aces2065",3]],[[["alpha",3],["aces2065",3]],["aces2065",3]],[[["premultipliedalpha",3],["aces2065",3]],["aces2065",3]],[[]],[[["acescc",3],["alpha",3]],["acescc",3]],[[],["acescc",3]],[[["premultipliedalpha",3],["acescc",3]],["acescc",3]],[[]],[[["acescct",3],["premultipliedalpha",3]],["acescct",3]],[[["alpha",3],["acescct",3]],["acescct",3]],[[]],[[],["acescct",3]],[[["displayp3",3],["premultipliedalpha",3]],["displayp3",3]],[[]],[[["alpha",3],["displayp3",3]],["displayp3",3]],[[],["displayp3",3]],[[],["encodeddisplayp3",3]],[[["alpha",3],["encodeddisplayp3",3]],["encodeddisplayp3",3]],[[["encodeddisplayp3",3],["premultipliedalpha",3]],["encodeddisplayp3",3]],[[]],[[],["dcip3",3]],[[["dcip3",3],["alpha",3]],["dcip3",3]],[[["dcip3",3],["premultipliedalpha",3]],["dcip3",3]],[[]],[[]],[[],["dcixyzprime",3]],[[["alpha",3],["dcixyzprime",3]],["dcixyzprime",3]],[[["dcixyzprime",3],["premultipliedalpha",3]],["dcixyzprime",3]],[[],["bt2020",3]],[[["bt2020",3],["premultipliedalpha",3]],["bt2020",3]],[[]],[[["bt2020",3],["alpha",3]],["bt2020",3]],[[],["encodedbt2020",3]],[[["encodedbt2020",3],["alpha",3]],["encodedbt2020",3]],[[]],[[["premultipliedalpha",3],["encodedbt2020",3]],["encodedbt2020",3]],[[],["bt2100",3]],[[]],[[["premultipliedalpha",3],["bt2100",3]],["bt2100",3]],[[["bt2100",3],["alpha",3]],["bt2100",3]],[[],["encodedbt2100pq",3]],[[]],[[["alpha",3],["encodedbt2100pq",3]],["encodedbt2100pq",3]],[[["premultipliedalpha",3],["encodedbt2100pq",3]],["encodedbt2100pq",3]],[[["premultipliedalpha",3],["encodedbt2100hlg",3]],["encodedbt2100hlg",3]],[[]],[[],["encodedbt2100hlg",3]],[[["alpha",3],["encodedbt2100hlg",3]],["encodedbt2100hlg",3]],[[["premultipliedalpha",3],["ictcppq",3]],["ictcppq",3]],[[]],[[],["ictcppq",3]],[[["alpha",3],["ictcppq",3]],["ictcppq",3]],[[["premultipliedalpha",3],["ictcphlg",3]],["ictcphlg",3]],[[]],[[["ictcphlg",3],["alpha",3]],["ictcphlg",3]],[[],["ictcphlg",3]],[[["premultipliedalpha",3],["ciexyz",3]],["ciexyz",3]],[[["alpha",3],["ciexyz",3]],["ciexyz",3]],[[],["ciexyz",3]],[[]],[[["cielab",3],["premultipliedalpha",3]],["cielab",3]],[[],["cielab",3]],[[["alpha",3],["cielab",3]],["cielab",3]],[[]],[[],["cielch",3]],[[["alpha",3],["cielch",3]],["cielch",3]],[[["premultipliedalpha",3],["cielch",3]],["cielch",3]],[[]],[[]],[[],["oklab",3]],[[["alpha",3],["oklab",3]],["oklab",3]],[[["premultipliedalpha",3],["oklab",3]],["oklab",3]],[[["alpha",3],["oklch",3]],["oklch",3]],[[["premultipliedalpha",3],["oklch",3]],["oklch",3]],[[],["oklch",3]],[[]],[[],["hsl",3]],[[["hsl",3],["alpha",3]],["hsl",3]],[[["hsl",3],["premultipliedalpha",3]],["hsl",3]],[[]],[[["hsv",3],["premultipliedalpha",3]],["hsv",3]],[[]],[[],["hsv",3]],[[["alpha",3],["hsv",3]],["hsv",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,nullnull,null,null,null,null,[[["alpha",3]],["bool",15]],[[["premultipliedalpha",3]],["bool",15]],[[["encodedsrgb",3]],["bool",15]],[[["linearsrgb",3]],["bool",15]],[[["encodedrec709",3]],["bool",15]],[[["rec709",3]],["bool",15]],[[["genericcolor",3]],["bool",15]],[[["acescg",3]],["bool",15]],[[["aces2065",3]],["bool",15]],[[["acescc",3]],["bool",15]],[[["acescct",3]],["bool",15]],[[["displayp3",3]],["bool",15]],[[["encodeddisplayp3",3]],["bool",15]],[[["dcip3",3]],["bool",15]],[[["dcixyzprime",3]],["bool",15]],[[["bt2020",3]],["bool",15]],[[["encodedbt2020",3]],["bool",15]],[[["bt2100",3]],["bool",15]],[[["encodedbt2100pq",3]],["bool",15]],[[["encodedbt2100hlg",3]],["bool",15]],[[["ictcppq",3]],["bool",15]],[[["ictcphlg",3]],["bool",15]],[[["ciexyz",3]],["bool",15]],[[["cielab",3]],["bool",15]],[[["cielch",3]],["bool",15]],[[["oklab",3]],["bool",15]],[[["oklch",3]],["bool",15]],[[["hsl",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["alpha",3]],[["ordering",4],["option",4]]],[[["premultipliedalpha",3]],[["ordering",4],["option",4]]],[[["encodedsrgb",3]],[["ordering",4],["option",4]]],[[["linearsrgb",3]],[["ordering",4],["option",4]]],[[["encodedrec709",3]],[["ordering",4],["option",4]]],[[["rec709",3]],[["ordering",4],["option",4]]],[[["genericcolor",3]],[["ordering",4],["option",4]]],[[["acescg",3]],[["ordering",4],["option",4]]],[[["aces2065",3]],[["ordering",4],["option",4]]],[[["acescc",3]],[["ordering",4],["option",4]]],[[["acescct",3]],[["ordering",4],["option",4]]],[[["displayp3",3]],[["ordering",4],["option",4]]],[[["encodeddisplayp3",3]],[["ordering",4],["option",4]]],[[["dcip3",3]],[["ordering",4],["option",4]]],[[["dcixyzprime",3]],[["ordering",4],["option",4]]],[[["bt2020",3]],[["ordering",4],["option",4]]],[[["encodedbt2020",3]],[["ordering",4],["option",4]]],[[["bt2100",3]],[["ordering",4],["option",4]]],[[["encodedbt2100pq",3]],[["ordering",4],["option",4]]],[[["encodedbt2100hlg",3]],[["ordering",4],["option",4]]],[[["ictcppq",3]],[["ordering",4],["option",4]]],[[["ictcphlg",3]],[["ordering",4],["option",4]]],[[["ciexyz",3]],[["ordering",4],["option",4]]],[[["cielab",3]],[["ordering",4],["option",4]]],[[["cielch",3]],[["ordering",4],["option",4]]],[[["oklab",3]],[["ordering",4],["option",4]]],[[["oklch",3]],[["ordering",4],["option",4]]],[[["hsl",3]],[["ordering",4],["option",4]]],[[["hsv",3]],[["ordering",4],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null],"p":[[8,"ColorInterop"],[8,"ColorStruct"],[3,"CieLab"],[3,"Oklab"],[3,"Alpha"],[3,"PremultipliedAlpha"],[3,"EncodedSrgb"],[3,"LinearSrgb"],[3,"EncodedRec709"],[3,"Rec709"],[3,"GenericColor"],[3,"AcesCg"],[3,"Aces2065"],[3,"AcesCc"],[3,"AcesCct"],[3,"DisplayP3"],[3,"EncodedDisplayP3"],[3,"DciP3"],[3,"DciXYZPrime"],[3,"Bt2020"],[3,"EncodedBt2020"],[3,"Bt2100"],[3,"EncodedBt2100PQ"],[3,"EncodedBt2100HLG"],[3,"ICtCpPQ"],[3,"ICtCpHLG"],[3,"CieXYZ"],[3,"CieLCh"],[3,"Oklch"],[3,"Hsl"],[3,"Hsv"]]},\
"colstodian":{"doc":"An opinionated color management library built on top of …","t":[8,3,3,4,8,6,8,3,3,16,3,13,13,4,3,13,4,16,3,13,18,18,18,3,13,3,13,8,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,13,3,13,3,3,3,3,18,18,18,18,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,4,6,4,13,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,6,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,13,4,3,13,3,16,3,3,16,16,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,12,11,11,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,16,8,8,8,8,16,16,16,16,8,8,16,8,18,18,18,8,8,10,10,10,10,10,10,10,10,10],"n":["AlphaState","Color","ColorAlpha","ColorError","ColorInto","ColorResult","ColorSpace","ColorU8","ColorU8Alpha","ComponentStruct","Display","Display","DowncastFailed","DynamicAlphaState","DynamicColorSpace","DynamicConversionFailed","DynamicState","LinearSpace","Premultiplied","Premultiplied","SPACE","STATE","STATE","Scene","Scene","Separate","Separate","State","add","add","add_assign","add_assign","alpha_states","as_linear","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","component_structs","const_color","const_color_alpha","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","div","div","div","div_assign","div_assign","eq","eq","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","is_linear","mul","mul","mul","mul_assign","mul_assign","ne","new","primaries","raw","raw","raw","raw","serialize","serialize","serialize","serialize","source","spaces","states","sub","sub","sub_assign","sub_assign","to_cie_xyY","to_cielab","to_cielch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","tonemap","traits","transform_function","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","white_point","with_primaries","with_transform","with_whitepoint","DynamicAlphaState","Premultiplied","Premultiplied","Separate","Separate","Color","ColorAlpha","ColorU8","ColorU8Alpha","ONE","ONE","ZERO","ZERO","acescg","add","add","add_assign","add_assign","as_ref","as_ref","as_ref","blend","blend","blend_alpha","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast_alpha_state","cast_space","cast_space","cast_state","cast_state","clone","clone","clone","clone_into","clone_into","clone_into","convert","convert","convert_alpha","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_state","convert_to","convert_to","decode","decode","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","div","div","div","div_assign","div_assign","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_f32","from_f32","from_raw","from_raw","from_raw","from_raw","from_u8","from_u8","index","index","index_mut","index_mut","into","into","into","into","into_color","into_color_no_premultiply","linear_srgb","linear_srgba","linearize","linearize","max_element","max_element","min_element","min_element","mul","mul","mul","mul_assign","mul_assign","ne","ne","new","new","new","new","premultiply","raw","raw","raw","raw","saturate","saturate","separate","serialize","serialize","serialize","splat","splat","srgb","srgb_u8","srgba","srgba_u8","sub","sub","sub_assign","sub_assign","to_alpha_opaque_premultiplied","to_f32","to_f32","to_owned","to_owned","to_owned","to_string","to_u8","to_u8","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_alpha","with_alpha_state","ColAlpha","ICtCp","LCh","Lab","Rgb","Xyz","a","alpha","b","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","col","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","cp","ct","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","g","h","i","into","into","into","into","into","into","l","l","ne","ne","ne","ne","ne","ne","r","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","x","y","z","ColorError","ColorResult","DowncastError","DowncastFailed","DynamicConversionError","DynamicConversionFailed","MismatchedAlphaState","MismatchedSpace","MismatchedState","NonlinearConversionInSceneState","StateChangeInNonlinearSpace","TonemapInDisplayState","borrow","borrow","borrow_mut","borrow_mut","convert_raw","convert_raw","convert_raw","convert_raw","fmt","fmt","fmt","fmt","from","from","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Aces2065","AcesCg","Bt2020","Bt2100","CieXYZ","DisplayP3","DynamicColorSpace","EncodedAcesCgSrgb","EncodedBt2020","EncodedBt2100PQ","EncodedDisplayP3","EncodedSrgb","ICtCpPQ","LinearSrgb","Oklab","Oklch","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dynamic_spaces","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ACES2065_1","ACES_CG","ADOBE_1998","ADOBE_WIDE","ALL_COLOR_SPACES","APPLE","BT_2020","BT_709","CIE_RGB","CIE_XYZ","DISPLAY_P3","ENCODED_ACES_CG_SRGB","ENCODED_BT_2020","ENCODED_BT_2100_PQ","ENCODED_BT_709","ENCODED_DISPLAY_P3","ENCODED_SRGB","ICtCp_HLG","ICtCp_PQ","LINEAR_SRGB","OKLAB","OKLCH","P3_D60","P3_THEATER","PRO_PHOTO","Display","Display","DynamicState","Scene","Scene","BakedLottesTonemapperParams","InputSpace","LottesTonemapper","LottesTonemapperParams","OutputSpace","Params","PerceptualTonemapper","PerceptualTonemapperParams","Tonemapper","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","contrast","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","convert_raw","cross_saturation","crosstalk","crosstalk","default","default","desaturation","deserialize","deserialize","eq","fmt","fmt","fmt","from","from","from","from","from","from","gray_point_in","gray_point_out","into","into","into","into","into","max_luminance","ne","saturation","serialize","serialize","shoulder","to_owned","to_owned","to_owned","tonemap","tonemap","tonemap","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AlphaState","AsU8","ColorAlphaConversionQuery","ColorConversionQuery","ColorInto","ColorSpace","ComponentStruct","ConvertFromAlphaRaw","ConvertFromRaw","ConvertToAlphaRaw","ConvertToRaw","DecodedSpace","DstAlpha","DstSpace","DstSpace","EncodedColorSpace","LinearColorSpace","LinearSpace","NonlinearColorSpace","SPACE","STATE","STATE","State","WorkingColorSpace","convert_raw","convert_raw","dst_transform_raw","dst_transform_raw","into","linear_part_raw","linear_part_raw","src_transform_raw","src_transform_raw"],"q":["colstodiancolstodian::alpha_states","","","","","colstodian::colorcolstodian::component_structs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","colstodian::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","colstodian::spaces","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","colstodian::spaces::dynamic_spaces","","","","","","","","","","","","","","","","","","","","","","","","","colstodian::states","","","","","colstodian::tonemap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","colstodian::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A type that implements this trait represents a color’s …","A strongly typed color, parameterized by a color space …","A strongly typed color with an alpha channel, …","Any error which can occur within the library.","A trait meant to be used as a replacement for [<code>Into</code>] in …","","A type that implements ColorSpace represents a specific …","An encoded color, 8-bit per component, 24-bit total.","An encoded color with alpha, 8-bit per component, 32-bit …","The ‘bag of components’ that this color space uses.","Encodes that a color is [<code>Display</code>]-referred (in the range […","See docs for [<code>Display</code>]","","A dynamic version of a color’s alpha state. See docs …","A color space defined in data by its [Primaries][…","","A dynamic version of a color’s state. See docs for […","The closest linear color space to this space.","Encodes that a color’s component values have been …","See docs for [<code>Premultiplied</code>]","The [<code>DynamicColorSpace</code>] that this type represents.","","","Encodes that a color is [<code>Scene</code>]-referred (in the range […","See docs for [<code>Scene</code>]","Encodes that a color’s component values are completely …","See docs for [<code>Separate</code>]","A type that implements this trait represents a color’s …","","","","","Contains types relating to a color’s alpha state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains color types and helper functions.","Structs that act as bags of named components which [<code>Color</code>]…","","","","","","","","","","","","","","","","","","","","","","","","","","","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error handling types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the color space has a non-linear transform applied","","","","","","","","","The raw values of the color. Be careful when modifying …","","The raw values of the color. Be careful when modifying …","","","","","","","Types representing different color spaces.","Contains types relating to a color’s state.","","","","","Creates a CIE uvV color space using this space’s white …","Creates a CIE LAB color space using this space’s white …","Creates a CIE LCh color space using this space’s white …","","","","","","","","","","","","","","","Contains tonemappers, useful for mapping scene-referred …","The traits which form the backbone of the strongly-typed […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new color space with the primaries and …","Creates a new color space with the primaries and white …","Creates a new color space with the transform function and …","A dynamic version of a color’s alpha state. See docs …","Encodes that a color’s component values have been …","See docs for [<code>Premultiplied</code>]","Encodes that a color’s component values are completely …","See docs for [<code>Separate</code>]","A strongly typed color, parameterized by a color space …","A strongly typed color with an alpha channel, …","An encoded color, 8-bit per component, 24-bit total.","An encoded color with alpha, 8-bit per component, 32-bit …","","","","","Creates a [<code>Color</code>] in the [<code>AcesCg</code>] color space in the <code>St</code> […","","","","","","","","Blend <code>self</code>’s color values with the color values from …","Blend <code>self</code>’s color values with the color values from …","Blend <code>self</code>’s color values with the color values from …","","","","","","","Changes this color’s alpha state. This assumes that you …","Interprets this color as <code>DstSpace</code> and <code>DstState</code>. This …","Changes this color’s alpha state. This assumes that you …","Interprets this color as <code>DstSpace</code>. This assumes you have …","Interprets this color as <code>DstSpace</code>. This assumes you have …","Changes this color’s state. This assumes that you have …","Changes this color’s State. This assumes that you have …","","","","","","","Converts from one color space and alpha state to another. …","Converts <code>self</code> from one color space to another while …","Converts <code>self</code> to the provided <code>DstAlpha</code> [<code>AlphaState</code>].","","","","","","","Converts this color from one state to another.","Converts from one color space and state to another.","Converts <code>self</code> from one color space to another while …","Decode <code>self</code> into its decoded ([working][WorkingColorSpace]…","Decode <code>self</code> into its decoded ([working][WorkingColorSpace]…","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","Test","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert <code>self</code> to a [<code>ColorU8Alpha</code>] of identical type. All …","Converts an f32-based [<code>Color</code>] into a u8-based [<code>ColorU8</code>]","Creates a [<code>ColorAlpha</code>] with raw values contained in <code>raw</code>.","","Creates a [<code>Color</code>] with raw values contained in <code>raw</code>.","","Decode a [<code>ColorU8Alpha</code>] into a [<code>ColorAlpha</code>] of identical …","Decode a <code>[u8; 4]</code> into a <code>Color</code> with specified space and …","","","","","","","","","Converts <code>self</code> to a [<code>Color</code>] by first premultiplying <code>self</code> …","Converts <code>self</code> to a [<code>Color</code>] by stripping off the alpha …","Creates a [<code>Color</code>] in the [<code>LinearSrgb</code>] color space in the …","Creates a [<code>ColorAlpha</code>] in the [<code>LinearSrgb</code>] color space …","Convert <code>self</code> into the closest linear color space.","Convert <code>self</code> into the closest linear color space.","Get the maximum element of <code>self</code>","Get the maximum element of <code>self</code>","Get the minimum element of <code>self</code>","Get the minimum element of <code>self</code>","","","","","","","","Creates a [<code>ColorAlpha</code>] with the raw internal color …","","Creates a [<code>Color</code>] with the internal color elements <code>el1</code>, …","","Premultiplies <code>self</code> by multiplying its color components by …","The raw values of the color. Be careful when modifying …","","The raw values of the color. Be careful when modifying …","","Clamp the raw element values of <code>self</code> in the range [0..1]","Clamp the raw element values of <code>self</code> in the range [0..1]","Separates <code>self</code> by dividing its color components by its …","","","","Creates a [<code>ColorAlpha</code>] with the internal color elements …","Creates a [<code>Color</code>] with the internal color elements all …","Creates a [<code>Color</code>] in the [<code>EncodedSrgb</code>] color space with …","Creates a [<code>Color</code>] in the [<code>EncodedSrgb</code>] color space with …","Creates a [<code>ColorAlpha</code>] in the [<code>EncodedSrgb</code>] color space …","Creates a [<code>ColorU8Alpha</code>] in the [<code>EncodedSrgb</code>] color space …","","","","","Converts <code>self</code> to a [<code>ColorAlpha</code>] with fully opaque alpha …","Decode a [<code>ColorU8Alpha</code>] into a [<code>ColorAlpha</code>] of identical …","Convert <code>self</code> to a <code>[u8; 3]</code>. All components of <code>self</code> will be …","","","","","Convert <code>self</code> to a [<code>ColorU8Alpha</code>] of identical type. All …","Convert <code>self</code> to a <code>[u8; 3]</code>. All components of <code>self</code> will be …","","","","","","","","","","Converts <code>self</code> to a [<code>ColorAlpha</code>] with [<code>Separate</code>] alpha …","Converts <code>self</code> to a [<code>ColorAlpha</code>] with specified [<code>AlphaState</code>…","A bag of components with an alpha channel. Some <code>ColorAlpha</code>…","A bag of components with names I (Intensity), Ct …","A bag of components with names L (Luminance), C (chroma), …","A bag of components with names L (Luminance), a …","A bag of components with names R, G, B. Some <code>Color</code>s with …","A bag of components with names X, Y, Z. Some <code>Color</code>s with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Any error which can occur within the library.","","An error when downcasting from a dynamic color to a typed …","","An error that occurred when performing a conversion on a […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A type representing the [ACES 2065-1][…","A type representing the [ACEScg][dynamic_spaces::ACES_CG] …","A type representing the [BT.2020][dynamic_spaces::BT_2020]…","A type representing the BT.2100 color space (equivalent …","A type representing the reference [XYZ][…","A type representing the Apple [Display P3][…","A color space defined in data by its [Primaries][…","A type representing the [ACEScg color space encoded with …","A type representing the encoded [BT.2020][Bt2020] color …","A type representing the encoded [BT.2100][Bt2100] color …","A type representing the encoded [Display P3][DisplayP3] …","A type representing the [encoded sRGB][…","A type representing the [ICtCp][dynamic_spaces::ICtCp_PQ] …","A type representing the [linear sRGB][…","A type representing the [Oklab][dynamic_spaces::OKLAB] …","A type representing the [Oklch][dynamic_spaces::OKLCH] …olor spaces defined as datais a linear encoding in [AP0 primaries][…","ACEScg is a linear encoding in [AP1 primaries][…","Adobe RGB (1998) is a linear encoding in [Adobe 1998 …","Adobe Wide Gamut RGB is a linear encoding in [Adobe Wide …","Array containing all built-in color spaces.","Apple RGB is a linear encoding in [Apple primaries][…","BT.2020 is a linear encoding in [BT.2020 primaries][…","BT.709 is a linear encoding in [BT.709 primaries][…","CIE RGB is the original RGB space, defined in [CIE RGB …","CIE XYZ reference color space. Uses [CIE XYZ primaries][…","Display P3 by Apple is a linear encoding in [P3 primaries]…","","Encoded BT.2020 is BT.2020 with the [BT.2020 OETF][…","Encoded BT.2100 PQ is BT.2020 (equivalent to the linear …","Encoded BT.709 is BT.709 with the BT.709 OETF applied.","Encoded Display P3 is [Display P3][DISPLAY_P3] with the …","Encoded sRGB is [Linear sRGB][LINEAR_SRGB] with the sRGB …","ICtCp_HLG is a non-linear encoding in [BT.2020 primaries][…","ICtCp_PQ is a non-linear encoding in [BT.2020 primaries][…","Linear sRGB is a linear encoding in [BT.709 primaries][…","Oklab is a non-linear, perceptual encoding in [XYZ][…","Oklch is a non-linear, perceptual encoding in [XYZ][…","P3-D60 (ACES Cinema) is a linear encoding in [P3 primaries…","P3-DCI (Theater) is a linear encoding in [P3 primaries][…","Pro Photo RGB is a linear encoding in [Pro Photo primaries…","Encodes that a color is [<code>Display</code>]-referred (in the range […","See docs for [<code>Display</code>]","A dynamic version of a color’s state. See docs for […","Encodes that a color is [<code>Scene</code>]-referred (in the range […","See docs for [<code>Scene</code>]","","","See this talk by Timothy Lottes …","Parameters for the [<code>LottesTonemapper</code>]","","","A neutral, perceptual tonemapper based on tonemapping …","","Performs tonemapping on a given input color.","","","","","","","","","","","","","","","","","Controls the strength of the toe and shoulder rolloff","","","","","","","","","","","Controls saturation within channel crosstalk","The amount that colors should “shift” or “crosstalk…","Controls the amount of channel crosstalk","","","The maximum desaturation for highlights. 0.0 is fully …","","","","","","","","","","","","","Average 18% gray point of the input scene. Change this to …","The average gray value of the output (ideally 0.18, …","","","","","","The maximum luminance of the input scene","","Controls saturation over the full tonal range","","","Controls the shape of the shoulder","","","","Tonemap <code>color</code> using <code>params</code>","","","","","","","","","","","","","","","","","","A type that implements this trait represents a color’s …","A type that implements this trait can be converted …","A “conversion query” for a [<code>ColorAlpha</code>][…","A “conversion query” for a [<code>Color</code>][crate::Color].","A trait meant to be used as a replacement for [<code>Into</code>] in …","A type that implements ColorSpace represents a specific …","The ‘bag of components’ that this color space uses.","Performs the conversion from [alpha state][AlphaState] …","Performs the raw conversion from the [<code>ColorSpace</code>] …","The complement of [<code>ConvertFromAlphaRaw</code>]. Performs the …","The complement of [<code>ConvertFromRaw</code>].","","","","","Marks a type as representing an encoded color space.","Marks a type as representing a linear color space.","The closest linear color space to this space.","Marks a type as representing a nonlinear color space.","The [<code>DynamicColorSpace</code>] that this type represents.","","","A type that implements this trait represents a color’s …","Marks a type as representing a color space that is not […","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,0,2,3,0,0,3,0,1,0,4,1,5,6,0,2,0,4,0,7,7,7,7,0,8,7,9,10,2,11,12,4,7,3,8,9,10,2,11,12,4,7,3,8,9,10,2,11,12,4,7,8,9,10,2,11,12,4,7,8,0,0,0,0,9,9,10,10,2,2,11,11,11,12,12,12,4,4,7,7,3,3,8,8,9,10,11,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,2,4,7,8,7,7,7,7,7,9,10,2,11,12,4,7,8,0,9,9,10,10,2,11,11,12,12,4,7,7,3,3,8,9,10,2,11,12,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,8,2,4,8,13,9,10,2,11,12,4,7,7,3,8,8,7,7,7,7,7,8,8,8,14,15,7,16,2,4,7,8,3,0,0,7,7,7,7,8,8,8,9,10,2,11,12,4,7,8,9,10,11,12,7,3,0,0,8,9,10,2,11,12,4,7,3,8,9,10,2,11,12,4,7,3,8,9,10,2,11,12,4,7,3,8,8,8,8,8,0,0,4,0,4,0,0,0,0,14,7,14,7,0,14,14,14,14,14,15,16,14,7,14,14,15,16,14,15,16,14,7,14,14,7,14,7,14,15,16,14,15,16,14,7,14,14,14,15,15,16,16,7,14,7,14,7,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,16,14,14,14,14,14,14,15,16,14,14,15,16,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,14,15,7,16,14,7,15,16,15,16,14,14,15,16,14,14,0,0,14,7,14,7,14,7,14,14,14,14,14,15,16,14,15,7,16,14,14,15,7,16,14,7,14,14,15,16,14,7,0,0,0,0,14,14,14,14,7,15,16,14,15,16,14,14,7,14,15,16,14,15,16,14,15,16,7,7,0,0,0,0,0,0,17,18,19,17,18,19,20,21,17,22,18,19,20,21,17,22,22,18,19,20,21,17,22,18,19,20,21,17,22,18,18,18,19,19,20,20,21,21,17,17,22,22,20,20,18,19,20,21,17,22,18,19,20,21,17,22,18,19,20,21,17,22,19,22,20,18,19,20,21,17,22,17,22,18,19,20,21,17,22,19,18,19,20,21,17,22,18,19,20,21,17,22,18,19,20,21,17,22,18,19,20,21,17,22,18,19,20,21,17,22,21,21,21,0,0,0,3,0,3,23,23,23,24,24,24,23,24,23,24,23,23,24,24,23,23,24,24,23,24,23,24,23,24,23,24,23,24,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,25,26,27,28,29,30,31,32,33,34,35,36,37,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,39,0,0,39,39,0,0,0,40,41,42,43,44,40,41,42,43,44,42,43,44,42,43,44,43,40,40,41,41,42,42,43,43,44,44,43,42,43,42,43,42,42,43,43,42,43,44,40,41,42,43,44,44,43,43,40,41,42,43,44,43,43,43,42,43,43,42,43,44,39,40,41,40,41,42,43,44,40,41,42,43,44,40,41,42,43,44,0,0,0,0,0,0,1,0,0,0,0,45,46,47,46,0,0,1,0,1,5,6,0,0,48,49,50,51,13,50,51,50,51],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["color",3]]],[[["vec3",3]]],[[["vec3",3]]],[[["color",3]]],null,[[],["colorspace",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scene",3]],[[],["display",3]],[[],["dynamicstate",4]],[[],["premultiplied",3]],[[],["separate",3]],[[],["dynamicalphastate",4]],[[],["color",3]],[[],["colorspace",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[],["scene",3]],[[],["display",3]],[[],["premultiplied",3]],[[],["separate",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["colorspace",3]]],[[["color",3]]],[[["f32",15]]],[[["vec3",3]]],[[["color",3]]],[[["vec3",3]]],[[["scene",3]],["bool",15]],[[["display",3]],["bool",15]],[[["dynamicstate",4]],["bool",15]],[[["premultiplied",3]],["bool",15]],[[["separate",3]],["bool",15]],[[["dynamicalphastate",4]],["bool",15]],[[["color",3]],["bool",15]],[[["colorspace",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["aces2065",3],["f32",15]],[["aces2065",3],["display",3],["color",3]]],[[]],[[["oklab",3],["f32",15]],[["oklab",3],["color",3],["display",3]]],[[["encodeddisplayp3",3],["f32",15]],[["display",3],["encodeddisplayp3",3],["color",3]]],[[["linearsrgb",3],["f32",15]],[["color",3],["linearsrgb",3],["display",3]]],[[["encodedsrgb",3],["f32",15]],[["color",3],["encodedsrgb",3],["display",3]]],[[["coloralpha",3]]],[[["acescg",3],["f32",15]],[["display",3],["color",3],["acescg",3]]],[[]],[[["ictcppq",3],["f32",15]],[["display",3],["ictcppq",3],["color",3]]],[[["bt2020",3],["f32",15]],[["color",3],["bt2020",3],["display",3]]],[[["ciexyz",3],["f32",15]],[["display",3],["color",3],["ciexyz",3]]],[[["oklch",3],["f32",15]],[["display",3],["oklch",3],["color",3]]],[[["encodedbt2020",3],["f32",15]],[["display",3],["color",3],["encodedbt2020",3]]],[[["encodedbt2100pq",3],["f32",15]],[["display",3],["color",3],["encodedbt2100pq",3]]],[[["displayp3",3],["f32",15]],[["color",3],["displayp3",3],["display",3]]],[[["dynamicconversionerror",4]]],[[["downcasterror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["color",3]],[[]],[[]],[[],["bool",15]],[[["vec3",3]]],[[["color",3]]],[[["f32",15]]],[[["color",3]]],[[["vec3",3]]],[[["colorspace",3]],["bool",15]],[[["rgbprimaries",4],["transformfn",4],["whitepoint",4]],["colorspace",3]],[[],["rgbprimaries",4]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["error",8],["option",4]]],null,null,[[["color",3]]],[[["vec3",3]]],[[["color",3]]],[[["vec3",3]]],[[],["colorspace",3]],[[],["colorspace",3]],[[],["colorspace",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,null,[[],["transformfn",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["whitepoint",4]],[[["rgbprimaries",4]],["colorspace",3]],[[["transformfn",4]],["colorspace",3]],[[["whitepoint",4]],["colorspace",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["f32",15]],[["state",8],["color",3],["acescg",3]]],[[["coloralpha",3]]],[[["vec4",3]]],[[["coloralpha",3]]],[[["vec4",3]]],[[]],[[]],[[]],[[["f32",15],["coloralpha",3],["separate",3]],[["coloralpha",3],["separate",3]]],[[["color",3],["f32",15]],["color",3]],[[["f32",15],["coloralpha",3],["separate",3]],[["coloralpha",3],["separate",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["colorspace",8],["coloralpha",3],["state",8],["alphastate",8]]],[[],[["color",3],["colorspace",8],["state",8]]],[[],[["coloralpha",3],["alphastate",8]]],[[],[["colorspace",8],["coloralpha",3]]],[[],[["colorspace",8],["color",3]]],[[],[["state",8],["coloralpha",3]]],[[],["color",3]],[[],["coloralpha",3]],[[],["coloru8alpha",3]],[[],["coloru8",3]],[[]],[[]],[[]],[[],["coloralpha",3]],[[],[["convertfromraw",8],["color",3]]],[[],[["alphastate",8],["coloralpha",3],["convertfromalpharaw",8]]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[],["color",3]],[[],["coloralpha",3]],[[],["color",3]],[[],["coloralpha",3]],[[],["color",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec4",3]]],[[["f32",15]]],[[["coloralpha",3]]],[[["coloralpha",3]]],[[["vec4",3]]],[[["coloralpha",3]],["bool",15]],[[["coloru8alpha",3]],["bool",15]],[[["coloru8",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["premultipliedalpha",3],["displayp3",3]],[["displayp3",3],["coloralpha",3],["premultiplied",3]]],[[["premultipliedalpha",3],["bt2020",3]],[["bt2020",3],["coloralpha",3],["premultiplied",3]]],[[["alpha",3],["acescg",3]],[["separate",3],["coloralpha",3],["acescg",3]]],[[["alpha",3],["oklab",3]],[["coloralpha",3],["oklab",3],["separate",3]]],[[["premultipliedalpha",3],["oklab",3]],[["oklab",3],["premultiplied",3],["coloralpha",3]]],[[["linearsrgb",3],["alpha",3]],[["linearsrgb",3],["coloralpha",3],["separate",3]]],[[["linearsrgb",3],["premultipliedalpha",3]],[["coloralpha",3],["linearsrgb",3],["premultiplied",3]]],[[["encodedbt2100pq",3],["premultipliedalpha",3]],[["premultiplied",3],["encodedbt2100pq",3],["coloralpha",3]]],[[["acescg",3],["premultipliedalpha",3]],[["premultiplied",3],["coloralpha",3],["acescg",3]]],[[["encodedbt2020",3],["alpha",3]],[["coloralpha",3],["encodedbt2020",3],["separate",3]]],[[["alpha",3],["encodedsrgb",3]],[["encodedsrgb",3],["coloralpha",3],["separate",3]]],[[["aces2065",3],["alpha",3]],[["aces2065",3],["coloralpha",3],["separate",3]]],[[["aces2065",3],["premultipliedalpha",3]],[["aces2065",3],["coloralpha",3],["premultiplied",3]]],[[["premultipliedalpha",3],["encodedbt2020",3]],[["encodedbt2020",3],["coloralpha",3],["premultiplied",3]]],[[["encodedsrgb",3],["premultipliedalpha",3]],[["encodedsrgb",3],["coloralpha",3],["premultiplied",3]]],[[]],[[["alpha",3],["ictcppq",3]],[["separate",3],["ictcppq",3],["coloralpha",3]]],[[["ictcppq",3],["premultipliedalpha",3]],[["coloralpha",3],["premultiplied",3],["ictcppq",3]]],[[]],[[["alpha",3],["displayp3",3]],[["displayp3",3],["coloralpha",3],["separate",3]]],[[["premultipliedalpha",3],["oklch",3]],[["coloralpha",3],["oklch",3],["premultiplied",3]]],[[["ciexyz",3],["alpha",3]],[["ciexyz",3],["separate",3],["coloralpha",3]]],[[["alpha",3],["encodeddisplayp3",3]],[["coloralpha",3],["encodeddisplayp3",3],["separate",3]]],[[["encodedbt2100pq",3],["alpha",3]],[["separate",3],["encodedbt2100pq",3],["coloralpha",3]]],[[["premultipliedalpha",3],["encodeddisplayp3",3]],[["premultiplied",3],["encodeddisplayp3",3],["coloralpha",3]]],[[["ciexyz",3],["premultipliedalpha",3]],[["coloralpha",3],["ciexyz",3],["premultiplied",3]]],[[["alpha",3],["oklch",3]],[["coloralpha",3],["oklch",3],["separate",3]]],[[["alpha",3],["bt2020",3]],[["bt2020",3],["coloralpha",3],["separate",3]]],[[["alpha",3],["oklab",3]],[["oklab",3],["coloru8alpha",3],["separate",3]]],[[["premultipliedalpha",3],["encodeddisplayp3",3]],[["coloru8alpha",3],["premultiplied",3],["encodeddisplayp3",3]]],[[["oklch",3],["alpha",3]],[["oklch",3],["separate",3],["coloru8alpha",3]]],[[["encodedbt2020",3],["premultipliedalpha",3]],[["encodedbt2020",3],["coloru8alpha",3],["premultiplied",3]]],[[["premultipliedalpha",3],["ciexyz",3]],[["coloru8alpha",3],["ciexyz",3],["premultiplied",3]]],[[["premultipliedalpha",3],["displayp3",3]],[["coloru8alpha",3],["displayp3",3],["premultiplied",3]]],[[["alpha",3],["displayp3",3]],[["displayp3",3],["separate",3],["coloru8alpha",3]]],[[["alpha",3],["bt2020",3]],[["bt2020",3],["coloru8alpha",3],["separate",3]]],[[["alpha",3],["ictcppq",3]],[["coloru8alpha",3],["ictcppq",3],["separate",3]]],[[["premultipliedalpha",3],["ictcppq",3]],[["premultiplied",3],["coloru8alpha",3],["ictcppq",3]]],[[["alpha",3],["encodeddisplayp3",3]],[["separate",3],["encodeddisplayp3",3],["coloru8alpha",3]]],[[["alpha",3],["encodedsrgb",3]],[["encodedsrgb",3],["separate",3],["coloru8alpha",3]]],[[["oklab",3],["premultipliedalpha",3]],[["oklab",3],["premultiplied",3],["coloru8alpha",3]]],[[["aces2065",3],["premultipliedalpha",3]],[["coloru8alpha",3],["aces2065",3],["premultiplied",3]]],[[["premultipliedalpha",3],["encodedsrgb",3]],[["coloru8alpha",3],["encodedsrgb",3],["premultiplied",3]]],[[["alpha",3],["ciexyz",3]],[["coloru8alpha",3],["ciexyz",3],["separate",3]]],[[["premultipliedalpha",3],["encodedbt2100pq",3]],[["coloru8alpha",3],["premultiplied",3],["encodedbt2100pq",3]]],[[["aces2065",3],["alpha",3]],[["aces2065",3],["coloru8alpha",3],["separate",3]]],[[["premultipliedalpha",3],["bt2020",3]],[["bt2020",3],["premultiplied",3],["coloru8alpha",3]]],[[["u32",15]]],[[["premultipliedalpha",3],["linearsrgb",3]],[["linearsrgb",3],["coloru8alpha",3],["premultiplied",3]]],[[["encodedbt2100pq",3],["alpha",3]],[["separate",3],["encodedbt2100pq",3],["coloru8alpha",3]]],[[["premultipliedalpha",3],["acescg",3]],[["coloru8alpha",3],["premultiplied",3],["acescg",3]]],[[["acescg",3],["alpha",3]],[["coloru8alpha",3],["acescg",3],["separate",3]]],[[["alpha",3],["linearsrgb",3]],[["coloru8alpha",3],["linearsrgb",3],["separate",3]]],[[["alpha",3],["encodedbt2020",3]],[["coloru8alpha",3],["encodedbt2020",3],["separate",3]]],[[]],[[]],[[["oklch",3],["premultipliedalpha",3]],[["coloru8alpha",3],["oklch",3],["premultiplied",3]]],[[["displayp3",3],["u8",15]],[["displayp3",3],["display",3],["coloru8",3]]],[[["oklab",3],["u8",15]],[["coloru8",3],["oklab",3],["display",3]]],[[["u8",15],["ictcppq",3]],[["coloru8",3],["display",3],["ictcppq",3]]],[[["encodedbt2100pq",3],["u8",15]],[["display",3],["coloru8",3],["encodedbt2100pq",3]]],[[["aces2065",3],["u8",15]],[["aces2065",3],["coloru8",3],["display",3]]],[[["oklch",3],["u8",15]],[["display",3],["oklch",3],["coloru8",3]]],[[]],[[["bt2020",3],["u8",15]],[["display",3],["bt2020",3],["coloru8",3]]],[[["ciexyz",3],["u8",15]],[["display",3],["ciexyz",3],["coloru8",3]]],[[["u8",15],["encodeddisplayp3",3]],[["display",3],["coloru8",3],["encodeddisplayp3",3]]],[[]],[[["encodedsrgb",3],["u8",15]],[["display",3],["coloru8",3],["encodedsrgb",3]]],[[["acescg",3],["u8",15]],[["coloru8",3],["display",3],["acescg",3]]],[[["encodedbt2020",3],["u8",15]],[["display",3],["encodedbt2020",3],["coloru8",3]]],[[["linearsrgb",3],["u8",15]],[["display",3],["coloru8",3],["linearsrgb",3]]],[[["coloralpha",3]],["coloru8alpha",3]],[[["color",3]]],[[["vec4",3]]],[[]],[[["vec3",3]]],[[]],[[["coloru8alpha",3]],["coloralpha",3]],[[["coloru8",3]],["color",3]],[[["usize",15]],["u8",15]],[[["usize",15]],["u8",15]],[[["usize",15]],["u8",15]],[[["usize",15]],["u8",15]],[[]],[[],["coloralpha",3]],[[]],[[]],[[],["color",3]],[[],["color",3]],[[["f32",15]],[["color",3],["linearsrgb",3],["state",8]]],[[["f32",15]],[["alphastate",8],["coloralpha",3],["linearsrgb",3],["state",8]]],[[],["coloralpha",3]],[[],["color",3]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["vec4",3]]],[[["coloralpha",3]]],[[["f32",15]]],[[["coloralpha",3]]],[[["vec4",3]]],[[["coloru8alpha",3]],["bool",15]],[[["coloru8",3]],["bool",15]],[[["f32",15]]],[[["u8",15]]],[[["f32",15]]],[[["u8",15]]],[[],[["premultiplied",3],["coloralpha",3]]],null,null,null,null,[[]],[[]],[[],[["coloralpha",3],["separate",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]],[["color",3],["encodedsrgb",3],["display",3]]],[[["u8",15]],[["display",3],["coloru8",3],["encodedsrgb",3]]],[[["f32",15]],[["coloralpha",3],["display",3],["encodedsrgb",3],["alphastate",8]]],[[["u8",15]],[["coloru8alpha",3],["display",3],["encodedsrgb",3],["alphastate",8]]],[[["coloralpha",3]]],[[["vec4",3]]],[[["vec4",3]]],[[["coloralpha",3]]],[[],[["premultiplied",3],["coloralpha",3]]],[[],["coloralpha",3]],[[],["color",3]],[[]],[[]],[[]],[[],["string",3]],[[],["coloru8alpha",3]],[[],["coloru8",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["f32",15]],[["coloralpha",3],["separate",3]]],[[["f32",15]],[["coloralpha",3],["alphastate",8]]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["colalpha",3]],[[],["rgb",3]],[[],["ictcp",3]],[[],["xyz",3]],[[],["lab",3]],[[],["lch",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],null,null,[[["colalpha",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["ictcp",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["lab",3]],["bool",15]],[[["lch",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["colalpha",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["ictcp",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["lab",3]],["bool",15]],[[["lch",3]],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["linearsrgb",3]],[[],["encodedsrgb",3]],[[],["ciexyz",3]],[[],["bt2020",3]],[[],["encodedbt2020",3]],[[],["encodedbt2100pq",3]],[[],["ictcppq",3]],[[],["oklab",3]],[[],["oklch",3]],[[],["acescg",3]],[[],["encodedacescgsrgb",3]],[[],["aces2065",3]],[[],["displayp3",3]],[[],["encodeddisplayp3",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],null,[[["linearsrgb",3]],["bool",15]],[[["encodedsrgb",3]],["bool",15]],[[["ciexyz",3]],["bool",15]],[[["bt2020",3]],["bool",15]],[[["encodedbt2020",3]],["bool",15]],[[["encodedbt2100pq",3]],["bool",15]],[[["ictcppq",3]],["bool",15]],[[["oklab",3]],["bool",15]],[[["oklch",3]],["bool",15]],[[["acescg",3]],["bool",15]],[[["encodedacescgsrgb",3]],["bool",15]],[[["aces2065",3]],["bool",15]],[[["displayp3",3]],["bool",15]],[[["encodeddisplayp3",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["perceptualtonemapperparams",3]],[[],["lottestonemapperparams",3]],[[],["bakedlottestonemapperparams",3]],[[]],[[]],[[]],null,[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],null,null,null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[["lottestonemapperparams",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["lottestonemapperparams",3]]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],null,[[["lottestonemapperparams",3]],["bool",15]],null,[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],[[],[["display",3],["color",3]]],[[],[["display",3],["color",3]]],[[],[["display",3],["color",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]]],"p":[[8,"ColorSpace"],[4,"DynamicState"],[4,"ColorError"],[4,"DynamicAlphaState"],[8,"State"],[8,"AlphaState"],[3,"Color"],[3,"DynamicColorSpace"],[3,"Scene"],[3,"Display"],[3,"Premultiplied"],[3,"Separate"],[8,"ColorInto"],[3,"ColorAlpha"],[3,"ColorU8Alpha"],[3,"ColorU8"],[3,"Lab"],[3,"ColAlpha"],[3,"Rgb"],[3,"ICtCp"],[3,"Xyz"],[3,"LCh"],[4,"DowncastError"],[4,"DynamicConversionError"],[3,"LinearSrgb"],[3,"EncodedSrgb"],[3,"CieXYZ"],[3,"Bt2020"],[3,"EncodedBt2020"],[3,"EncodedBt2100PQ"],[3,"ICtCpPQ"],[3,"Oklab"],[3,"Oklch"],[3,"AcesCg"],[3,"EncodedAcesCgSrgb"],[3,"Aces2065"],[3,"DisplayP3"],[3,"EncodedDisplayP3"],[8,"Tonemapper"],[3,"PerceptualTonemapper"],[3,"LottesTonemapper"],[3,"PerceptualTonemapperParams"],[3,"LottesTonemapperParams"],[3,"BakedLottesTonemapperParams"],[8,"EncodedColorSpace"],[8,"ColorAlphaConversionQuery"],[8,"ColorConversionQuery"],[8,"ConvertFromAlphaRaw"],[8,"ConvertToAlphaRaw"],[8,"ConvertFromRaw"],[8,"ConvertToRaw"]]},\
"glam":{"doc":"glam","tn":["EulerRot","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","XYX","XYZ","XZX","XZY","YXY","YXZ","YZX","YZY","ZXY","ZXZ","ZYX","ZYZ","bool","borrow","borrow_mut","clone","clone_into","const_dmat2","const_dmat3","const_dmat4","const_dquat","const_dvec2","const_dvec3","const_dvec4","const_ivec2","const_ivec3","const_ivec4","const_m128","const_mat2","const_mat3","const_mat3a","const_mat4","const_quat","const_uvec2","const_uvec3","const_uvec4","const_vec2","const_vec3","const_vec3a","const_vec4","default","f32","f64","fmt","from","i32","into","swizzles","to_owned","try_from","try_into","type_id","u32","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","BVec2","BVec3","BVec3A","BVec4","BVec4A","all","all","all","all","all","any","any","any","any","any","as_ref","as_ref","as_ref","as_ref","as_ref","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","new","new","new","new","new","not","not","not","not","not","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AXES","AXES","AXES","AXES","Affine2","Affine3A","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","Mat2","Mat3","Mat3A","Mat4","ONE","ONE","ONE","ONE","Quat","Vec2","Vec3","Vec3A","Vec4","W","X","X","X","X","Y","Y","Y","Y","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat3","add_mat3","add_mat4","angle_between","angle_between","angle_between","angle_between","any_orthogonal_vector","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_vector","any_orthonormal_vector","as_f64","as_f64","as_f64","as_f64","as_f64","as_f64","as_f64","as_f64","as_f64","as_i32","as_i32","as_i32","as_i32","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_u32","as_u32","as_u32","as_u32","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","ceil","clamp","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cmpne","col","col","col","col","col_mut","col_mut","col_mut","col_mut","conjugate","cross","cross","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","determinant","determinant","determinant","determinant","distance","distance","distance","distance","distance_squared","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot","dot","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp","extend","extend","extend","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat4","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_translation","from_vec4","from_xyzw","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","length","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_rh","look_at_rh","mat2","mat3","mat3a","mat4","matrix2","matrix3","max","max","max","max","max_element","max_element","max_element","max_element","min","min","min","min","min_element","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat3","mul_mat3","mul_mat4","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec3","mul_vec3","mul_vec3","mul_vec3a","mul_vec3a","mul_vec3a","mul_vec4","neg","neg","neg","neg","neg","new","new","new","new","normalize","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","orthographic_lh","orthographic_rh","orthographic_rh_gl","perp","perp_dot","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_lh","perspective_rh","perspective_rh_gl","powf","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","quat","recip","recip","recip","recip","reject_from","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","round","round","round","round","row","row","row","row","select","select","select","select","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signum","signum","signum","signum","slerp","splat","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat3","sub_mat3","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_array","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point2","transform_point3","transform_point3","transform_point3a","transform_point3a","transform_vector2","transform_vector2","transform_vector2","transform_vector3","transform_vector3","transform_vector3a","transform_vector3a","translation","translation","transpose","transpose","transpose","transpose","truncate","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec2","vec3","vec3a","vec4","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxy","xxxz","xxxz","xxxz","xxy","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyy","xxyz","xxyz","xxyz","xxz","xxz","xxz","xxzw","xxzx","xxzx","xxzx","xxzy","xxzy","xxzy","xxzz","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxy","xyxz","xyxz","xyxz","xyy","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyy","xyyz","xyyz","xyyz","xyz","xyzx","xyzx","xyzx","xyzy","xyzy","xyzy","xyzz","xyzz","xyzz","xz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzx","xzxw","xzxx","xzxx","xzxx","xzxy","xzxy","xzxy","xzxz","xzxz","xzxz","xzy","xzy","xzy","xzyw","xzyx","xzyx","xzyx","xzyy","xzyy","xzyy","xzyz","xzyz","xzyz","xzz","xzz","xzz","xzzw","xzzx","xzzx","xzzx","xzzy","xzzy","xzzy","xzzz","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxy","yxxz","yxxz","yxxz","yxy","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyy","yxyz","yxyz","yxyz","yxz","yxz","yxz","yxzw","yxzx","yxzx","yxzx","yxzy","yxzy","yxzy","yxzz","yxzz","yxzz","yy","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxy","yyxz","yyxz","yyxz","yyy","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyy","yyyz","yyyz","yyyz","yyz","yyz","yyz","yyzw","yyzx","yyzx","yyzx","yyzy","yyzy","yyzy","yyzz","yyzz","yyzz","yz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzx","yzxw","yzxx","yzxx","yzxx","yzxy","yzxy","yzxy","yzxz","yzxz","yzxz","yzy","yzy","yzy","yzyw","yzyx","yzyx","yzyx","yzyy","yzyy","yzyy","yzyz","yzyz","yzyz","yzz","yzz","yzz","yzzw","yzzx","yzzx","yzzx","yzzy","yzzy","yzzy","yzzz","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxx","zxxw","zxxx","zxxx","zxxx","zxxy","zxxy","zxxy","zxxz","zxxz","zxxz","zxy","zxy","zxy","zxyw","zxyx","zxyx","zxyx","zxyy","zxyy","zxyy","zxyz","zxyz","zxyz","zxz","zxz","zxz","zxzw","zxzx","zxzx","zxzx","zxzy","zxzy","zxzy","zxzz","zxzz","zxzz","zy","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyx","zyxw","zyxx","zyxx","zyxx","zyxy","zyxy","zyxy","zyxz","zyxz","zyxz","zyy","zyy","zyy","zyyw","zyyx","zyyx","zyyx","zyyy","zyyy","zyyy","zyyz","zyyz","zyyz","zyz","zyz","zyz","zyzw","zyzx","zyzx","zyzx","zyzy","zyzy","zyzy","zyzz","zyzz","zyzz","zz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzx","zzxw","zzxx","zzxx","zzxx","zzxy","zzxy","zzxy","zzxz","zzxz","zzxz","zzy","zzy","zzy","zzyw","zzyx","zzyx","zzyx","zzyy","zzyy","zzyy","zzyz","zzyz","zzyz","zzz","zzz","zzz","zzzw","zzzx","zzzx","zzzx","zzzy","zzzy","zzzy","zzzz","zzzz","zzzz","AXES","AXES","AXES","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat3","add_mat4","angle_between","angle_between","angle_between","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_vector","as_f32","as_f32","as_f32","as_f32","as_f32","as_f32","as_f32","as_i32","as_i32","as_i32","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_u32","as_u32","as_u32","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","col","col","col","col_mut","col_mut","col_mut","conjugate","cross","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","determinant","determinant","determinant","distance","distance","distance","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dmat2","dmat3","dmat4","dot","dot","dot","dot","dquat","dvec2","dvec3","dvec4","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","extend","extend","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_angle","from_angle","from_angle","from_angle_translation","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_vec4","from_xyzw","index","index","index","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_normalized","is_normalized","is_normalized","is_normalized","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_rh","look_at_rh","matrix2","matrix3","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat3","mul_mat4","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec3","mul_vec3","mul_vec4","neg","neg","neg","neg","new","new","new","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","orthographic_lh","orthographic_rh","orthographic_rh_gl","perp","perp_dot","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_lh","perspective_rh","perspective_rh_gl","powf","powf","powf","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","recip","recip","recip","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","round","round","round","row","row","row","select","select","select","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signum","signum","signum","slerp","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat3","sub_mat4","sum","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point3","transform_point3","transform_vector2","transform_vector2","transform_vector3","transform_vector3","translation","translation","transpose","transpose","transpose","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","IVec2","IVec3","IVec4","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","abs","abs","abs","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_f32","as_f32","as_f32","as_f64","as_f64","as_f64","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_u32","as_u32","as_u32","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","ivec2","ivec3","ivec4","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","new","perp","perp_dot","product","product","product","select","select","select","serialize","serialize","serialize","signum","signum","signum","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyz","xyz","xyzw","xyzw","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","ONE","ONE","ONE","UVec2","UVec3","UVec4","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_f32","as_f32","as_f32","as_f64","as_f64","as_f64","as_i32","as_i32","as_i32","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","new","new","product","product","product","select","select","select","serialize","serialize","serialize","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uvec2","uvec3","uvec4","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz"],"q":["glamglam::bool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glam::f32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glam::fglam::iglam::swizzlesglam::ud":["Euler rotation sequences.","","","Swizzle methods for 2-dimensional vector types. ","","","Swizzle methods for 3-dimensional vector types. ","","","Swizzle methods for 3-dimensional vector types. ","Intrinsic two-axis rotation XYX","Intrinsic three-axis rotation XYZ","Intrinsic two-axis rotation XZX","Intrinsic three-axis rotation XZY","Intrinsic two-axis rotation YXY","Intrinsic three-axis rotation YXZ","Intrinsic three-axis rotation YZX","Intrinsic two-axis rotation YZY","Intrinsic three-axis rotation ZXY","Intrinsic two-axis rotation ZXZ","Intrinsic three-axis rotation ZYX","Intrinsic two-axis rotation ZYZ","<code>bool</code> vector mask types. ","","","","","Creates a <code>DMat2</code> from two column vectors that can be used …","Creates a <code>DMat3</code> from three column vectors that can be …","Creates a <code>DMat4</code> from four column vectors that can be used …","Creates a <code>DQuat</code> from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values that can be …","Creates a <code>DVec2</code> that can be used to initialize a constant …","Creates a <code>DVec3</code> that can be used to initialize a constant …","Creates a <code>DVec4</code> that can be used to initialize a constant …","Creates a <code>IVec2</code> that can be used to initialize a constant …","Creates a <code>IVec3</code> that can be used to initialize a constant …","Creates a <code>IVec4</code> that can be used to initialize a constant …","","Creates a <code>Mat2</code> from two column vectors that can be used …","Creates a <code>Mat3</code> from three column vectors that can be used …","Creates a <code>Mat3A</code> from three column vectors that can be …","Creates a <code>Mat4</code> from four column vectors that can be used …","Creates a <code>Quat</code> from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values that can be used …","Creates a <code>UVec2</code> that can be used to initialize a constant …","Creates a <code>UVec3</code> that can be used to initialize a constant …","Creates a <code>UVec4</code> that can be used to initialize a constant …","Creates a <code>Vec2</code> that can be used to initialize a constant …","Creates a <code>Vec3</code> that can be used to initialize a constant …","Creates a <code>Vec3A</code> that can be used to initialize a constant …","Creates a <code>Vec4</code> that can be used to initialize a constant …","Default YXZi as yaw (y-axis), pitch (x-axis), roll …","<code>f32</code> vector, quaternion and matrix types. ","<code>f64</code> vector, quaternion and matrix types. ","","","<code>i32</code> vector types. ","","Traits adding swizzle methods to all vector types. ","","","","","<code>u32</code> vector typesdimensional boolean vector.","A 3-dimensional boolean vector.","A 3-dimensional SIMD vector mask.","A 4-dimensional boolean vector.","A 4-dimensional SIMD vector mask.","Returns true if all the elements are true, false …","Returns true if all the elements are true, false …","Returns true if all the elements are true, false …","Returns true if all the elements are true, false …","Returns true if all the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","","","","","","","","","","","","","","","","Returns a bitmask with the lowest two bits set from the …","Returns a bitmask with the lowest two bits set from the …","Returns a bitmask with the lowest two bits set from the …","Returns a bitmask with the lowest two bits set from the …","Returns a bitmask with the lowest two bits set from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unit axes.","The unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","The identity transform.","The identity transform.","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","All ones.","All ones.","All ones.","All ones.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector without SIMD support.","A 3-dimensional vector with SIMD support.","A 4-dimensional vector.","<code>[0, 0, 0, 1]</code>: a unit-length vector pointing along the …","<code>[1, 0]</code>: a unit-length vector pointing along the positive …","<code>[1, 0, 0]</code>: a unit-length vector pointing along the …","<code>[1, 0, 0]</code>: a unit-length vector pointing along the …","<code>[1, 0, 0, 0]</code>: a unit-length vector pointing along the …","<code>[0, 1]</code>: a unit-length vector pointing along the positive …","<code>[0, 1, 0]</code>: a unit-length vector pointing along the …","<code>[0, 1, 0]</code>: a unit-length vector pointing along the …","<code>[0, 1, 0, 0]</code>: a unit-length vector pointing along the …","<code>[0, 0, 1]</code>: a unit-length vector pointing along the …","<code>[0, 0, 1]</code>: a unit-length vector pointing along the …","<code>[0, 0, 1, 0]</code>: a unit-length vector pointing along the …","The degenerate zero transform.","The degenerate zero transform.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between <code>self</code> and <code>other</code>.","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) between two vectors.","Returns somes vector that is orthogonal to the given one.","Returns somes vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Computes the cross product of <code>self</code> and <code>other</code>.","Computes the cross product of <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>other</code>. The dot …","Computes the dot product of <code>self</code> and <code>other</code>.","Computes the dot product of <code>self</code> and <code>other</code>.","Computes the dot product of <code>self</code> and <code>other</code>.","Computes the dot product of <code>self</code> and <code>other</code>.","","","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","","","","","","","","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","Creates a <code>Vec3A</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code> …","","","","","","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 2D rotation …","Creates a rotation quaternion from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from four column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","Creates an affine transform from a <code>[S; 6]</code> array stored in …","Creates an affine transform from a <code>[S; 12]</code> array stored …","Creates a 2x2 matrix from a <code>[S; 4]</code> array stored in column …","Creates a 3x3 matrix from a <code>[S; 9]</code> array stored in column …","Creates a 3x3 matrix from a <code>[S; 9]</code> array stored in column …","Creates a 4x4 matrix from a <code>[S; 16]</code> array stored in …","Creates an affine transform from a <code>[[S; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[S; 3]; 4]</code> 2D array …","Creates a 2x2 matrix from a <code>[[S; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[S; 3]; 3]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[S; 3]; 3]</code> 2D array stored …","Creates a 4x4 matrix from a <code>[[S; 4]; 4]</code> 2D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> …","Creates a 3D rotation matrix from the given euler …","Creates a 3D rotation matrix from the given euler …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>Mat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the …","Creates an affine transformation matrix from the given …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>Mat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the …","Creates a 3x3 matrix from a 4x4 matrix, discarding the …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians …","Creates a rotation quaternion from a slice.","Creates a vector from the first N values in <code>slice</code>.","Creates a vector from the first N values in <code>slice</code>.","Creates a vector from the first N values in <code>slice</code>.","Creates a vector from the first N values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","","","","","","","","","","","","","","","","","","","","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  …","Returns <code>true</code> if, and only if, all elements are finite.  …","Returns <code>true</code> if, and only if, all elements are finite.  …","Returns <code>true</code> if, and only if, all elements are finite.  …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the mininum values for each …","Returns a vector containing the mininum values for each …","Returns a vector containing the mininum values for each …","Returns a vector containing the mininum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion and a 3D vector, returning the …","Multiplies a quaternion by a scalar value.","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","","","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies this matrix by a scalar value.","Transforms a 2D vector.","Transforms a 3D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a <code>Vec3A</code>.","Transforms a <code>Vec3A</code>.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","","","","","","Creates a new vector.","Creates a new 3D vector.","Creates a new 3D vector.","Creates a new 4D vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix …","Creates a right-handed orthographic projection matrix …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>other</code>. Also …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Returns a vector containing each element of <code>self</code> raised …","Returns a vector containing each element of <code>self</code> raised …","Returns a vector containing each element of <code>self</code> raised …","Returns a vector containing each element of <code>self</code> raised …","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Transforms the given 3D vector as a point, applying …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","Subtracts the other quaternion from self.","","","","","","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis and angle (in radians) of <code>self</code>.","Creates a <code>[S; 6]</code> array storing data in column major order.…","Creates a <code>[S; 12]</code> array storing data in column major …","Creates a <code>[S; 4]</code> array storing data in column major order.…","Creates a <code>[S; 9]</code> array storing data in column major order.…","Creates a <code>[S; 9]</code> array storing data in column major order.…","Creates a <code>[S; 16]</code> array storing data in column major …","Creates a <code>[[S; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[S; 3]; 4]</code> 2D array storing data in column …","Creates a <code>[[S; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[S; 3]; 3]</code> 2D array storing data in column …","Creates a <code>[[S; 3]; 3]</code> 2D array storing data in column …","Creates a <code>[[S; 4]; 4]</code> 2D array storing data in column …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","","","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given <code>Vec3A</code>, applying shear, scale, …","Transforms the given <code>Vec3A</code> as 3D point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given <code>Vec3A</code>, applying shear, scale and …","Transforms the give <code>Vec3A</code> as 3D vector.","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a <code>Vec3</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 4 elements in …","Writes the columns of <code>self</code> to the first 9 elements in …","Writes the columns of <code>self</code> to the first 9 elements in …","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first N elements in …","Writes the elements of <code>self</code> to the first N elements in …","Writes the elements of <code>self</code> to the first N elements in …","Writes the elements of <code>self</code> to the first N elements in …he unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","The identity transform.","The identity transform.","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","All ones.","All ones.","All ones.","<code>[0, 0, 0, 1]</code>: a unit-length vector pointing along the …","<code>[1, 0]</code>: a unit-length vector pointing along the positive …","<code>[1, 0, 0]</code>: a unit-length vector pointing along the …","<code>[1, 0, 0, 0]</code>: a unit-length vector pointing along the …","<code>[0, 1]</code>: a unit-length vector pointing along the positive …","<code>[0, 1, 0]</code>: a unit-length vector pointing along the …","<code>[0, 1, 0, 0]</code>: a unit-length vector pointing along the …","<code>[0, 0, 1]</code>: a unit-length vector pointing along the …","<code>[0, 0, 1, 0]</code>: a unit-length vector pointing along the …","The degenerate zero transform.","The degenerate zero transform.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between <code>self</code> and <code>other</code>.","Returns the angle (in radians) between two vectors.","Returns somes vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","","","","","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Computes the cross product of <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","Computes the dot product of <code>self</code> and <code>other</code>. The dot …","Computes the dot product of <code>self</code> and <code>other</code>.","Computes the dot product of <code>self</code> and <code>other</code>.","Computes the dot product of <code>self</code> and <code>other</code>.","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","","","","","","","","","","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","","","","","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 2D rotation …","Creates a rotation quaternion from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from four column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","Creates an affine transform from a <code>[S; 6]</code> array stored in …","Creates an affine transform from a <code>[S; 12]</code> array stored …","Creates a 2x2 matrix from a <code>[S; 4]</code> array stored in column …","Creates a 3x3 matrix from a <code>[S; 9]</code> array stored in column …","Creates a 4x4 matrix from a <code>[S; 16]</code> array stored in …","Creates an affine transform from a <code>[[S; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[S; 3]; 4]</code> 2D array …","Creates a 2x2 matrix from a <code>[[S; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[S; 3]; 3]</code> 2D array stored …","Creates a 4x4 matrix from a <code>[[S; 4]; 4]</code> 2D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> …","Creates a 3D rotation matrix from the given euler …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>Mat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the …","Creates an affine transformation matrix from the given …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>Mat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians …","Creates a rotation quaternion from a slice.","Creates a vector from the first N values in <code>slice</code>.","Creates a vector from the first N values in <code>slice</code>.","Creates a vector from the first N values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","","","","","","","","","","","","","","","","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  …","Returns <code>true</code> if, and only if, all elements are finite.  …","Returns <code>true</code> if, and only if, all elements are finite.  …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the mininum values for each …","Returns a vector containing the mininum values for each …","Returns a vector containing the mininum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","Multiplies a quaternion by a scalar value.","Multiplies a quaternion and a 3D vector, returning the …","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies this matrix by a scalar value.","Transforms a 2D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","","","","","Creates a new vector.","Creates a new 3D vector.","Creates a new 4D vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix …","Creates a right-handed orthographic projection matrix …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>other</code>. Also …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Returns a vector containing each element of <code>self</code> raised …","Returns a vector containing each element of <code>self</code> raised …","Returns a vector containing each element of <code>self</code> raised …","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Transforms the given 3D vector as a point, applying …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","Subtracts the other quaternion from self.","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis and angle (in radians) of <code>self</code>.","Creates a <code>[S; 6]</code> array storing data in column major order.…","Creates a <code>[S; 12]</code> array storing data in column major …","Creates a <code>[S; 4]</code> array storing data in column major order.…","Creates a <code>[S; 9]</code> array storing data in column major order.…","Creates a <code>[S; 16]</code> array storing data in column major …","Creates a <code>[[S; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[S; 3]; 4]</code> 2D array storing data in column …","Creates a <code>[[S; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[S; 3]; 3]</code> 2D array storing data in column …","Creates a <code>[[S; 4]; 4]</code> 2D array storing data in column …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a <code>Vec3</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 4 elements in …","Writes the columns of <code>self</code> to the first 9 elements in …","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first N elements in …","Writes the elements of <code>self</code> to the first N elements in …","Writes the elements of <code>self</code> to the first N elements in …he unit axes.","The unit axes.","The unit axes.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","All ones.","All ones.","All ones.","<code>[0, 0, 0, 1]</code>: a unit-length vector pointing along the …","<code>[1, 0]</code>: a unit-length vector pointing along the positive …","<code>[1, 0, 0]</code>: a unit-length vector pointing along the …","<code>[1, 0, 0, 0]</code>: a unit-length vector pointing along the …","<code>[0, 1]</code>: a unit-length vector pointing along the positive …","<code>[0, 1, 0]</code>: a unit-length vector pointing along the …","<code>[0, 1, 0, 0]</code>: a unit-length vector pointing along the …","<code>[0, 0, 1]</code>: a unit-length vector pointing along the …","<code>[0, 0, 1, 0]</code>: a unit-length vector pointing along the …","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","","","","","","","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>other</code>.","Computes the dot product of <code>self</code> and <code>other</code>.","Computes the dot product of <code>self</code> and <code>other</code>.","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","Creates a vector from the first N values in <code>slice</code>.","Creates a vector from the first N values in <code>slice</code>.","Creates a vector from the first N values in <code>slice</code>.","","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the mininum values for each …","Returns a vector containing the mininum values for each …","Returns a vector containing the mininum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Creates a new vector.","Creates a new 3D vector.","Creates a new 4D vector.","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>other</code>. Also …","","","","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a <code>Vec3</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","Writes the elements of <code>self</code> to the first N elements in …","Writes the elements of <code>self</code> to the first N elements in …","Writes the elements of <code>self</code> to the first N elements in …wizzle methods for 2-dimensional vector types. ","","","Swizzle methods for 3-dimensional vector types. ","","","Swizzle methods for 3-dimensional vector typeshe unit axes.","The unit axes.","The unit axes.","All ones.","All ones.","All ones.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","<code>[0, 0, 0, 1]</code>: a unit-length vector pointing along the …","<code>[1, 0]</code>: a unit-length vector pointing along the positive …","<code>[1, 0, 0]</code>: a unit-length vector pointing along the …","<code>[1, 0, 0, 0]</code>: a unit-length vector pointing along the …","<code>[0, 1]</code>: a unit-length vector pointing along the positive …","<code>[0, 1, 0]</code>: a unit-length vector pointing along the …","<code>[0, 1, 0, 0]</code>: a unit-length vector pointing along the …","<code>[0, 0, 1]</code>: a unit-length vector pointing along the …","<code>[0, 0, 1, 0]</code>: a unit-length vector pointing along the …","All zeroes.","All zeroes.","All zeroes.","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>other</code>.","Computes the dot product of <code>self</code> and <code>other</code>.","Computes the dot product of <code>self</code> and <code>other</code>.","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","Creates a vector from the first N values in <code>slice</code>.","Creates a vector from the first N values in <code>slice</code>.","Creates a vector from the first N values in <code>slice</code>.","","","","","","","","","","","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the mininum values for each …","Returns a vector containing the mininum values for each …","Returns a vector containing the mininum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","Creates a new vector.","Creates a new 3D vector.","Creates a new 4D vector.","","","","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a <code>Vec3</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Writes the elements of <code>self</code> to the first N elements in …","Writes the elements of <code>self</code> to the first N elements in …","Writes the elements of <code>self</code> to the first N elements in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"if":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["eulerrot",4]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,[[["formatter",3]],["result",6]],[[]],null,[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],nullnull,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bvec3a",3]],[[],["bvec4a",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["bvec3",3]]],[[["bvec4",3]]],[[]],[[]],[[]],[[["bvec3a",3]]],[[]],[[["bvec4a",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["f32",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f32",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]]],[[["vec2",3]]],[[["f32",15]]],[[["vec3",3]]],[[["f32",15]]],[[["vec3a",3]]],[[["f32",15]]],[[["vec4",3]]],[[]],[[]],[[]],[[]],[[["vec2",3]]],[[["f32",15]]],[[["vec3",3]]],[[["f32",15]]],[[["vec3a",3]]],[[["f32",15]]],[[["vec4",3]]],[[["f32",15]]],[[]],[[]],[[]],[[]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dmat2",3]],[[],["dmat3",3]],[[],["dmat3",3]],[[],["dmat4",3]],[[],["dquat",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[],["affine2",3]],[[],["affine3a",3]],[[],["mat2",3]],[[],["mat3",3]],[[],["mat3a",3]],[[],["mat4",3]],[[],["quat",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec3a",3]],[[],["vec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec3a",3]],[[],["bvec4a",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec3a",3]],[[],["bvec4a",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec3a",3]],[[],["bvec4a",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec3a",3]],[[],["bvec4a",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec3a",3]],[[],["bvec4a",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec3a",3]],[[],["bvec4a",3]],[[["usize",15]],["vec2",3]],[[["usize",15]],["vec3",3]],[[["usize",15]],["vec3a",3]],[[["usize",15]],["vec4",3]],[[["usize",15]],["vec2",3]],[[["usize",15]],["vec3",3]],[[["usize",15]],["vec3a",3]],[[["usize",15]],["vec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["f32",15]]],[[["vec2",3]]],[[["f32",15]]],[[["vec3",3]]],[[["f32",15]]],[[["vec3a",3]]],[[["f32",15]]],[[["vec4",3]]],[[["f32",15]]],[[["vec2",3]]],[[["f32",15]]],[[["vec3",3]]],[[["f32",15]]],[[["vec3a",3]]],[[["f32",15]]],[[["vec4",3]]],[[["f32",15]]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["f32",15]],["vec3",3]],[[["f32",15]],["vec4",3]],[[["f32",15]],["vec4",3]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["affine2",3]],["mat3",3]],[[["mat3a",3]]],[[]],[[["affine2",3]],["mat3a",3]],[[]],[[["mat3",3]]],[[["affine3a",3]],["mat4",3]],[[]],[[]],[[]],[[["vec4",3]]],[[]],[[]],[[["vec3",3]]],[[["vec3a",3]]],[[["vec4",3]]],[[]],[[]],[[["vec3a",3]]],[[]],[[]],[[["__m128",3]]],[[["vec3",3]]],[[]],[[]],[[["vec4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["__m128",3]]],[[["quat",3]]],[[]],[[]],[[["affine3a",3]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["vec2",3],["f32",15]]],[[]],[[["f32",15],["vec3",3]]],[[["f32",15],["vec3",3]]],[[["f32",15],["vec3",3]]],[[["f32",15],["vec3",3]]],[[["f32",15],["vec3",3]]],[[["vec2",3]]],[[["vec3a",3]]],[[["vec2",3]]],[[["vec3",3]]],[[["vec3a",3]]],[[["vec4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec2",3]]],[[["vec3",3]]],[[["vec3",3]]],[[["vec4",3]]],[[["eulerrot",4],["f32",15]]],[[["eulerrot",4],["f32",15]]],[[["eulerrot",4],["f32",15]]],[[["eulerrot",4],["f32",15]]],[[["mat2",3]]],[[["mat2",3]]],[[["mat2",3]]],[[["mat2",3],["vec2",3]]],[[["mat3",3]]],[[["mat3",3]]],[[["mat3",3]]],[[["mat3",3]]],[[["mat3",3]]],[[["mat3",3],["vec3",3]]],[[["mat4",3]]],[[["mat4",3]]],[[["mat4",3]]],[[["mat4",3]]],[[["quat",3]]],[[["quat",3]]],[[["quat",3]]],[[["quat",3]]],[[["vec3",3]]],[[["vec3",3]]],[[["quat",3],["vec3",3]]],[[["quat",3],["vec3",3]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["vec2",3]]],[[["vec3",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec3",3]]],[[["f32",15],["vec2",3]]],[[["f32",15],["vec2",3]]],[[["f32",15],["vec2",3]]],[[["f32",15],["vec2",3]]],[[["quat",3],["vec3",3]]],[[["quat",3],["vec3",3]]],[[["vec3",3]]],[[]],[[]],[[]],[[]],[[]],[[["vec2",3]]],[[["vec3",3]]],[[["vec2",3]]],[[["vec2",3]]],[[["vec3",3]]],[[["vec4",3]]],[[["f32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec3a",3]],[[],["bvec4a",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["vec3",3]]],[[["vec3",3]]],[[["vec3",3]]],[[["vec3",3]]],[[["vec2",3]],["mat2",3]],[[["vec3",3]],["mat3",3]],[[["vec3a",3]],["mat3a",3]],[[["vec4",3]],["mat4",3]],null,null,[[]],[[]],[[]],[[]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["f32",15]]],[[["affine2",3]]],[[["mat3",3]]],[[["mat3a",3]]],[[["affine3a",3]]],[[["f32",15]]],[[["mat4",3]]],[[]],[[["vec2",3]]],[[["f32",15]]],[[]],[[["vec3",3]]],[[["vec3a",3]],["vec3a",3]],[[["affine2",3]]],[[["f32",15]]],[[]],[[["vec3a",3]]],[[["f32",15]]],[[["vec3",3]],["vec3",3]],[[["affine2",3]]],[[]],[[["affine3a",3]]],[[["f32",15]]],[[["vec4",3]]],[[["vec3",3]]],[[["f32",15]]],[[]],[[["vec3a",3]]],[[["f32",15]]],[[["vec2",3]]],[[["f32",15]]],[[["vec3",3]]],[[["f32",15]]],[[["vec3a",3]]],[[["f32",15]]],[[["vec4",3]]],[[]],[[["f32",15]]],[[]],[[["f32",15]]],[[["f32",15]]],[[]],[[]],[[["f32",15]]],[[]],[[["f32",15]]],[[["vec2",3]]],[[["vec3",3]]],[[["f32",15]]],[[["f32",15]]],[[["vec3a",3]]],[[["f32",15]]],[[["vec4",3]]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["vec2",3]],["vec2",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3a",3]],["vec3a",3]],[[["vec3a",3]],["vec3a",3]],[[["vec3a",3]],["vec3a",3]],[[["vec4",3]],["vec4",3]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]],["vec2",3]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[]],[[["vec2",3]],["f32",15]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec3",3]],["vec3",3]],[[["f32",15]],["quat",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["vec2",3]],[[["usize",15]],["vec3",3]],[[["usize",15]],["vec3a",3]],[[["usize",15]],["vec4",3]],[[["bvec2",3],["vec2",3]],["vec2",3]],[[["bvec3",3],["vec3",3]],["vec3",3]],[[["bvec3a",3],["vec3a",3]],["vec3a",3]],[[["bvec4a",3],["vec4",3]],["vec4",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec2",3]]],[[["f32",15]]],[[["vec3",3]]],[[["f32",15]]],[[["vec3a",3]]],[[["f32",15]]],[[["vec4",3]]],[[["f32",15]]],[[]],[[]],[[]],[[]],[[["vec2",3]]],[[["f32",15]]],[[["f32",15]]],[[["vec3",3]]],[[["f32",15]]],[[["vec3a",3]]],[[["vec4",3]]],[[["f32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["eulerrot",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec3",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["vec2",3]],["vec2",3]],[[["vec2",3]],["vec2",3]],[[["vec2",3]],["vec2",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3a",3]],["vec3a",3]],[[["vec3a",3]],["vec3a",3]],[[["vec2",3]],["vec2",3]],[[["vec2",3]],["vec2",3]],[[["vec2",3]],["vec2",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3a",3]],["vec3a",3]],[[["vec3a",3]],["vec3a",3]],null,null,[[]],[[]],[[]],[[]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["f32",15]],["vec2",3]],[[["f32",15]],["vec3",3]],[[["f32",15]],["vec3a",3]],[[["f32",15]],["vec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[]],[[]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[["dvec2",3]]],[[["f64",15]]],[[["dvec3",3]]],[[["dvec4",3]]],[[["f64",15]]],[[]],[[]],[[]],[[["dvec2",3]]],[[["f64",15]]],[[["dvec3",3]]],[[["f64",15]]],[[["dvec4",3]]],[[["f64",15]]],[[]],[[]],[[]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[]],[[]],[[]],[[],["mat2",3]],[[],["mat3",3]],[[],["mat4",3]],[[],["quat",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[],["daffine2",3]],[[],["daffine3",3]],[[],["dmat2",3]],[[],["dmat3",3]],[[],["dmat4",3]],[[],["dquat",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[["usize",15]],["dvec2",3]],[[["usize",15]],["dvec3",3]],[[["usize",15]],["dvec4",3]],[[["usize",15]],["dvec2",3]],[[["usize",15]],["dvec3",3]],[[["usize",15]],["dvec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[["f64",15]]],[[["f64",15]]],[[["dvec2",3]]],[[["f64",15]]],[[["dvec3",3]]],[[["f64",15]]],[[["dvec4",3]]],[[["f64",15]]],[[["dvec2",3]]],[[["dvec3",3]]],[[["f64",15]]],[[["f64",15]]],[[["dvec4",3]]],[[["dvec2",3]],["dmat2",3]],[[["dvec3",3]],["dmat3",3]],[[["dvec4",3]],["dmat4",3]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[["f64",15]],["dquat",3]],[[["f64",15]],["dvec2",3]],[[["f64",15]],["dvec3",3]],[[["f64",15]],["dvec4",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[["f64",15]],["dvec3",3]],[[["f64",15]],["dvec4",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["daffine2",3]],["dmat3",3]],[[]],[[]],[[["daffine3",3]],["dmat4",3]],[[]],[[]],[[["dvec3",3]]],[[]],[[["dvec4",3]]],[[]],[[]],[[]],[[]],[[]],[[["dvec4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dquat",3]]],[[["daffine3",3]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15],["dvec2",3]]],[[]],[[["f64",15],["dvec3",3]]],[[["f64",15],["dvec3",3]]],[[["f64",15],["dvec3",3]]],[[["f64",15],["dvec3",3]]],[[["dvec2",3]]],[[["dvec3",3]]],[[["dvec2",3]]],[[["dvec3",3]]],[[["dvec4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dvec2",3]]],[[["dvec3",3]]],[[["dvec4",3]]],[[["eulerrot",4],["f64",15]]],[[["eulerrot",4],["f64",15]]],[[["eulerrot",4],["f64",15]]],[[["dmat2",3]]],[[["dmat2",3]]],[[["dvec2",3],["dmat2",3]]],[[["dmat3",3]]],[[["dmat3",3]]],[[["dmat3",3]]],[[["dmat3",3]]],[[["dmat3",3]]],[[["dmat3",3],["dvec3",3]]],[[["dmat4",3]]],[[["dmat4",3]]],[[["dmat4",3]]],[[["dquat",3]]],[[["dquat",3]]],[[["dquat",3]]],[[["dvec3",3]]],[[["dvec3",3]]],[[["dquat",3],["dvec3",3]]],[[["dquat",3],["dvec3",3]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["dvec2",3]]],[[["dvec3",3]]],[[["dvec2",3]]],[[["dvec3",3]]],[[["f64",15],["dvec2",3]]],[[["f64",15],["dvec2",3]]],[[["f64",15],["dvec2",3]]],[[["dvec3",3],["dquat",3]]],[[["dvec3",3],["dquat",3]]],[[["dvec3",3]]],[[]],[[]],[[]],[[]],[[["dvec2",3]]],[[["dvec3",3]]],[[["dvec2",3]]],[[["dvec3",3]]],[[["dvec4",3]]],[[["f64",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["dvec3",3]]],[[["dvec3",3]]],[[["dvec3",3]]],[[["dvec3",3]]],null,null,[[]],[[]],[[]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[]],[[]],[[]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[["dmat3",3]]],[[["f64",15]]],[[["daffine2",3]]],[[["daffine3",3]]],[[["f64",15]]],[[["dmat4",3]]],[[]],[[["f64",15]]],[[["dvec2",3]]],[[["dvec3",3]]],[[]],[[["f64",15]]],[[["daffine2",3]]],[[]],[[["dvec4",3]]],[[["f64",15]]],[[["daffine3",3]]],[[["f64",15]]],[[["dvec3",3]]],[[]],[[["f64",15]]],[[["dvec2",3]]],[[["dvec3",3]]],[[["f64",15]]],[[["f64",15]]],[[["dvec4",3]]],[[]],[[["f64",15]]],[[]],[[["f64",15]]],[[]],[[["f64",15]]],[[]],[[["f64",15]]],[[["dvec2",3]]],[[["f64",15]]],[[["dvec3",3]]],[[["f64",15]]],[[["dvec4",3]]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["dvec2",3]],["dvec2",3]],[[["dvec3",3]],["dvec3",3]],[[["dvec3",3]],["dvec3",3]],[[["dvec4",3]],["dvec4",3]],[[]],[[]],[[]],[[]],[[["f64",15]],["dvec2",3]],[[["f64",15]]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[]],[[["dvec2",3]],["f64",15]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dvec3",3]],["dvec3",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["dvec2",3]],[[["usize",15]],["dvec3",3]],[[["usize",15]],["dvec4",3]],[[["bvec2",3],["dvec2",3]],["dvec2",3]],[[["bvec3",3],["dvec3",3]],["dvec3",3]],[[["bvec4",3],["dvec4",3]],["dvec4",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[["dvec2",3]]],[[["dvec3",3]]],[[["f64",15]]],[[["f64",15]]],[[["dvec4",3]]],[[]],[[]],[[]],[[["dvec2",3]]],[[["f64",15]]],[[["f64",15]]],[[["dvec3",3]]],[[["f64",15]]],[[["dvec4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["eulerrot",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dvec3",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["dvec2",3]],["dvec2",3]],[[["dvec2",3]],["dvec2",3]],[[["dvec3",3]],["dvec3",3]],[[["dvec3",3]],["dvec3",3]],[[["dvec2",3]],["dvec2",3]],[[["dvec2",3]],["dvec2",3]],[[["dvec3",3]],["dvec3",3]],[[["dvec3",3]],["dvec3",3]],null,null,[[]],[[]],[[]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec2",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec2",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec2",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec2",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],[[],["dvec4",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["i32",15]]],[[["ivec2",3]]],[[["ivec3",3]]],[[["i32",15]]],[[["i32",15]]],[[["ivec4",3]]],[[["i32",15]]],[[["ivec2",3]]],[[["ivec3",3]]],[[["i32",15]]],[[["i32",15]]],[[["ivec4",3]]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[]],[[]],[[]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["i32",15]]],[[["ivec2",3]]],[[["i32",15]]],[[["ivec3",3]]],[[["ivec4",3]]],[[["i32",15]]],[[["i32",15]]],[[["ivec2",3]]],[[["ivec3",3]]],[[["i32",15]]],[[["ivec4",3]]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["i32",15]],["ivec3",3]],[[["i32",15]],["ivec4",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["ivec3",3]]],[[]],[[["ivec4",3]]],[[]],[[]],[[["ivec4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["i32",15]],["ivec2",3]],[[["i32",15]],["ivec3",3]],[[["i32",15]],["ivec4",3]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["ivec2",3]]],[[["i32",15]]],[[["i32",15]]],[[["ivec3",3]]],[[["i32",15]]],[[["ivec4",3]]],[[["i32",15]]],[[["ivec2",3]]],[[["ivec3",3]]],[[["i32",15]]],[[["ivec4",3]]],[[["i32",15]]],[[]],[[]],[[]],[[["i32",15]],["ivec2",3]],[[["i32",15]]],[[["i32",15]]],[[]],[[["ivec2",3]],["i32",15]],[[]],[[]],[[]],[[["bvec2",3],["ivec2",3]],["ivec2",3]],[[["bvec3",3],["ivec3",3]],["ivec3",3]],[[["bvec4",3],["ivec4",3]],["ivec4",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["ivec2",3]]],[[["ivec3",3]]],[[["i32",15]]],[[["i32",15]]],[[["ivec4",3]]],[[["ivec2",3]]],[[["i32",15]]],[[["ivec3",3]]],[[["i32",15]]],[[["i32",15]]],[[["ivec4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec2",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec2",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec2",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec2",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[]],[[],["ivec3",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],[[],["ivec4",3]],null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["uvec2",3]]],[[["u32",15]]],[[["u32",15]]],[[["uvec3",3]]],[[["u32",15]]],[[["uvec4",3]]],[[["u32",15]]],[[["uvec2",3]]],[[["uvec3",3]]],[[["u32",15]]],[[["u32",15]]],[[["uvec4",3]]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["dvec2",3]],[[],["dvec3",3]],[[],["dvec4",3]],[[],["ivec2",3]],[[],["ivec3",3]],[[],["ivec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[]],[[]],[[]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[],["bvec2",3]],[[],["bvec3",3]],[[],["bvec4",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["uvec2",3]]],[[["u32",15]]],[[["u32",15]]],[[["uvec3",3]]],[[["u32",15]]],[[["uvec4",3]]],[[["u32",15]]],[[["uvec2",3]]],[[["uvec3",3]]],[[["u32",15]]],[[["u32",15]]],[[["uvec4",3]]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["u32",15]],["uvec3",3]],[[["u32",15]],["uvec4",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["uvec4",3]]],[[]],[[]],[[["uvec3",3]]],[[]],[[["uvec4",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["uvec2",3]]],[[["u32",15]]],[[["uvec3",3]]],[[["u32",15]]],[[["uvec4",3]]],[[["u32",15]]],[[["uvec2",3]]],[[["u32",15]]],[[["u32",15]]],[[["uvec3",3]]],[[["u32",15]]],[[["uvec4",3]]],[[["u32",15]],["uvec2",3]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["uvec2",3],["bvec2",3]],["uvec2",3]],[[["bvec3",3],["uvec3",3]],["uvec3",3]],[[["bvec4",3],["uvec4",3]],["uvec4",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["uvec2",3]]],[[["u32",15]]],[[["u32",15]]],[[["uvec3",3]]],[[["uvec4",3]]],[[["u32",15]]],[[["u32",15]]],[[["uvec2",3]]],[[["u32",15]]],[[["uvec3",3]]],[[["uvec4",3]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]],["uvec2",3]],[[["u32",15]],["uvec3",3]],[[["u32",15]],["uvec4",3]],[[]],[[]],[[]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec2",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec2",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec2",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec2",3]],[[],["uvec2",3]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[]],[[],["uvec3",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]],[[],["uvec4",3]]],"p":[[8,"Vec3Swizzles"],[8,"Vec4Swizzles"],[8,"Vec2Swizzles"],[4,"EulerRot"],[3,"BVec3A"],[3,"BVec4A"],[3,"BVec2"],[3,"BVec3"],[3,"BVec4"],[3,"Vec2"],[3,"Vec3"],[3,"Vec3A"],[3,"Vec4"],[3,"Affine2"],[3,"Affine3A"],[3,"Mat2"],[3,"Mat3"],[3,"Mat3A"],[3,"Mat4"],[3,"Quat"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"DAffine2"],[3,"DAffine3"],[3,"DMat2"],[3,"DMat3"],[3,"DMat4"],[3,"DQuat"],[3,"IVec2"],[3,"IVec3"],[3,"IVec4"],[3,"UVec2"],[3,"UVec3"],[3,"UVec4"]]},\
"kolor":{"doc":"kolor implements conversions between color spaces which …","tn":["AXES","Color","ColorConversion","ColorSpace","FType","IDENTITY","Mat3","ONE","Vec3","X","Y","Z","ZERO","ZERO","abs","abs_diff_eq","abs_diff_eq","add","add","add","add_assign","add_assign","add_assign","add_mat3","angle_between","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_vector","as_f64","as_f64","as_i32","as_mut","as_mut","as_ref","as_ref","as_u32","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","clamp","clamp_length","clamp_length_max","clamp_length_min","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpge","cmpgt","cmple","cmplt","cmpne","col","col_mut","const_mat3","cross","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","details","determinant","distance","distance_squared","div","div","div_assign","div_assign","dot","eq","eq","eq","eq","exp","extend","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from_angle","from_axis_angle","from_cols","from_cols_array","from_cols_array_2d","from_cols_slice","from_diagonal","from_euler","from_mat2","from_mat4","from_quat","from_rotation_x","from_rotation_y","from_rotation_z","from_scale","from_scale_angle_translation","from_slice","from_translation","hash","index","index_mut","into","into","into","into","into","inverse","is_finite","is_finite","is_nan","is_nan","is_nan_mask","is_normalized","length","length_recip","length_squared","lerp","max","max_element","min","min_element","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat3","mul_scalar","mul_vec3","mul_vec3a","ne","neg","new","normalize","normalize_or_zero","powf","product","product","project_onto","project_onto_normalized","recip","reject_from","reject_from_normalized","round","row","select","serialize","serialize","serialize","serialize","signum","space","spaces","splat","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_mat3","sum","sum","to_array","to_cols_array","to_cols_array_2d","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transform_point2","transform_vector2","transpose","truncate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_normalize","type_id","type_id","type_id","type_id","type_id","value","write_cols_to_slice","write_to_slice","xx","xxx","xxxx","xxxy","xxxz","xxy","xxyx","xxyy","xxyz","xxz","xxzx","xxzy","xxzz","xy","xyx","xyxx","xyxy","xyxz","xyy","xyyx","xyyy","xyyz","xyzx","xyzy","xyzz","xz","xzx","xzxx","xzxy","xzxz","xzy","xzyx","xzyy","xzyz","xzz","xzzx","xzzy","xzzz","yx","yxx","yxxx","yxxy","yxxz","yxy","yxyx","yxyy","yxyz","yxz","yxzx","yxzy","yxzz","yy","yyx","yyxx","yyxy","yyxz","yyy","yyyx","yyyy","yyyz","yyz","yyzx","yyzy","yyzz","yz","yzx","yzxx","yzxy","yzxz","yzy","yzyx","yzyy","yzyz","yzz","yzzx","yzzy","yzzz","zx","zxx","zxxx","zxxy","zxxz","zxy","zxyx","zxyy","zxyz","zxz","zxzx","zxzy","zxzz","zy","zyx","zyxx","zyxy","zyxz","zyy","zyyx","zyyy","zyyz","zyz","zyzx","zyzy","zyzz","zz","zzx","zzxx","zzxy","zzxz","zzy","zzyx","zzyy","zzyz","zzz","zzzx","zzzy","zzzz","cat","color","conversion","generated_matrices","math","transform","xyz","Bradford","Cat02","CmcCat2000","LMSConeSpace","Sharp","VonKries","borrow","borrow_mut","chromatic_adaptation_transform","from","into","lms_cone_space_matrix","try_from","try_into","type_id","A","ADOBE_1998","ADOBE_WIDE","AP0","AP1","APPLE","B","BT_2020","BT_601","BT_709","C","CIELAB","CIELCh","CIE_1960_UCS","CIE_1960_UCS_uvV","CIE_1964_UVW","CIE_1976_Luv","CIE_RGB","CIE_XYZ","CIE_xyY","Color","ColorSpace","D50","D55","D60","D65","D75","E","ENUM_COUNT","ENUM_COUNT","ENUM_COUNT","F11","F2","F7","HSI","HSL","HSV","ICtCp_HLG","ICtCp_PQ","NONE","NONE","NONE","Oklab","Oklch","P3","P3_DCI","PQ","PRO_PHOTO","RGBPrimaries","TransformFn","WhitePoint","as_linear","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_spaces","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","is_linear","new","new","primaries","sRGB","serialize","serialize","serialize","space","space","srgb","to","to_cie_xyY","to_cielab","to_cielch","to_linear","to_owned","to_owned","to_owned","transform_function","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","values","values","white_point","with_primaries","with_transform","with_whitepoint","ACES2065_1","ACES_CG","ADOBE_1998","ADOBE_WIDE","ALL_COLOR_SPACES","APPLE","BT_2020","BT_709","CIE_RGB","CIE_XYZ","DISPLAY_P3","ENCODED_BT_2020","ENCODED_BT_2100_PQ","ENCODED_BT_709","ENCODED_DISPLAY_P3","ENCODED_SRGB","ICtCp_HLG","ICtCp_PQ","LINEAR_SRGB","OKLAB","OKLCH","P3_D60","P3_THEATER","PRO_PHOTO","ColorConversion","LinearColorConversion","apply_dst_transform","apply_linear_part","apply_src_transform","borrow","borrow_mut","clone","clone_into","convert","convert","convert_float","deserialize","dst_space","dst_transform","dst_transform_fn","eq","fmt","from","input_space","into","invert","is_linear","linear_part","matrix","ne","new","new","output_space","serialize","src_space","src_transform","src_transform_fn","to_owned","try_from","try_into","type_id","ADOBE_1998_D65_TO_ADOBE_WIDE_D50","ADOBE_1998_D65_TO_AP0_D60","ADOBE_1998_D65_TO_AP1_D60","ADOBE_1998_D65_TO_APPLE_D65","ADOBE_1998_D65_TO_BT_2020_D65","ADOBE_1998_D65_TO_BT_709_D65","ADOBE_1998_D65_TO_CIE_RGB_E","ADOBE_1998_D65_TO_CIE_XYZ_D65","ADOBE_1998_D65_TO_P3_D60","ADOBE_1998_D65_TO_P3_D65","ADOBE_1998_D65_TO_P3_P3_DCI","ADOBE_1998_D65_TO_PRO_PHOTO_D50","ADOBE_WIDE_D50_TO_ADOBE_1998_D65","ADOBE_WIDE_D50_TO_AP0_D60","ADOBE_WIDE_D50_TO_AP1_D60","ADOBE_WIDE_D50_TO_APPLE_D65","ADOBE_WIDE_D50_TO_BT_2020_D65","ADOBE_WIDE_D50_TO_BT_709_D65","ADOBE_WIDE_D50_TO_CIE_RGB_E","ADOBE_WIDE_D50_TO_CIE_XYZ_D65","ADOBE_WIDE_D50_TO_P3_D60","ADOBE_WIDE_D50_TO_P3_D65","ADOBE_WIDE_D50_TO_P3_P3_DCI","ADOBE_WIDE_D50_TO_PRO_PHOTO_D50","AP0_D60_TO_ADOBE_1998_D65","AP0_D60_TO_ADOBE_WIDE_D50","AP0_D60_TO_AP1_D60","AP0_D60_TO_APPLE_D65","AP0_D60_TO_BT_2020_D65","AP0_D60_TO_BT_709_D65","AP0_D60_TO_CIE_RGB_E","AP0_D60_TO_CIE_XYZ_D65","AP0_D60_TO_P3_D60","AP0_D60_TO_P3_D65","AP0_D60_TO_P3_P3_DCI","AP0_D60_TO_PRO_PHOTO_D50","AP1_D60_TO_ADOBE_1998_D65","AP1_D60_TO_ADOBE_WIDE_D50","AP1_D60_TO_AP0_D60","AP1_D60_TO_APPLE_D65","AP1_D60_TO_BT_2020_D65","AP1_D60_TO_BT_709_D65","AP1_D60_TO_CIE_RGB_E","AP1_D60_TO_CIE_XYZ_D65","AP1_D60_TO_P3_D60","AP1_D60_TO_P3_D65","AP1_D60_TO_P3_P3_DCI","AP1_D60_TO_PRO_PHOTO_D50","APPLE_D65_TO_ADOBE_1998_D65","APPLE_D65_TO_ADOBE_WIDE_D50","APPLE_D65_TO_AP0_D60","APPLE_D65_TO_AP1_D60","APPLE_D65_TO_BT_2020_D65","APPLE_D65_TO_BT_709_D65","APPLE_D65_TO_CIE_RGB_E","APPLE_D65_TO_CIE_XYZ_D65","APPLE_D65_TO_P3_D60","APPLE_D65_TO_P3_D65","APPLE_D65_TO_P3_P3_DCI","APPLE_D65_TO_PRO_PHOTO_D50","BT_2020_D65_TO_ADOBE_1998_D65","BT_2020_D65_TO_ADOBE_WIDE_D50","BT_2020_D65_TO_AP0_D60","BT_2020_D65_TO_AP1_D60","BT_2020_D65_TO_APPLE_D65","BT_2020_D65_TO_BT_709_D65","BT_2020_D65_TO_CIE_RGB_E","BT_2020_D65_TO_CIE_XYZ_D65","BT_2020_D65_TO_P3_D60","BT_2020_D65_TO_P3_D65","BT_2020_D65_TO_P3_P3_DCI","BT_2020_D65_TO_PRO_PHOTO_D50","BT_709_D65_TO_ADOBE_1998_D65","BT_709_D65_TO_ADOBE_WIDE_D50","BT_709_D65_TO_AP0_D60","BT_709_D65_TO_AP1_D60","BT_709_D65_TO_APPLE_D65","BT_709_D65_TO_BT_2020_D65","BT_709_D65_TO_CIE_RGB_E","BT_709_D65_TO_CIE_XYZ_D65","BT_709_D65_TO_P3_D60","BT_709_D65_TO_P3_D65","BT_709_D65_TO_P3_P3_DCI","BT_709_D65_TO_PRO_PHOTO_D50","CIE_RGB_E_TO_ADOBE_1998_D65","CIE_RGB_E_TO_ADOBE_WIDE_D50","CIE_RGB_E_TO_AP0_D60","CIE_RGB_E_TO_AP1_D60","CIE_RGB_E_TO_APPLE_D65","CIE_RGB_E_TO_BT_2020_D65","CIE_RGB_E_TO_BT_709_D65","CIE_RGB_E_TO_CIE_XYZ_D65","CIE_RGB_E_TO_P3_D60","CIE_RGB_E_TO_P3_D65","CIE_RGB_E_TO_P3_P3_DCI","CIE_RGB_E_TO_PRO_PHOTO_D50","CIE_XYZ_D65_TO_ADOBE_1998_D65","CIE_XYZ_D65_TO_ADOBE_WIDE_D50","CIE_XYZ_D65_TO_AP0_D60","CIE_XYZ_D65_TO_AP1_D60","CIE_XYZ_D65_TO_APPLE_D65","CIE_XYZ_D65_TO_BT_2020_D65","CIE_XYZ_D65_TO_BT_709_D65","CIE_XYZ_D65_TO_CIE_RGB_E","CIE_XYZ_D65_TO_P3_D60","CIE_XYZ_D65_TO_P3_D65","CIE_XYZ_D65_TO_P3_P3_DCI","CIE_XYZ_D65_TO_PRO_PHOTO_D50","P3_D60_TO_ADOBE_1998_D65","P3_D60_TO_ADOBE_WIDE_D50","P3_D60_TO_AP0_D60","P3_D60_TO_AP1_D60","P3_D60_TO_APPLE_D65","P3_D60_TO_BT_2020_D65","P3_D60_TO_BT_709_D65","P3_D60_TO_CIE_RGB_E","P3_D60_TO_CIE_XYZ_D65","P3_D60_TO_P3_D65","P3_D60_TO_P3_P3_DCI","P3_D60_TO_PRO_PHOTO_D50","P3_D65_TO_ADOBE_1998_D65","P3_D65_TO_ADOBE_WIDE_D50","P3_D65_TO_AP0_D60","P3_D65_TO_AP1_D60","P3_D65_TO_APPLE_D65","P3_D65_TO_BT_2020_D65","P3_D65_TO_BT_709_D65","P3_D65_TO_CIE_RGB_E","P3_D65_TO_CIE_XYZ_D65","P3_D65_TO_P3_D60","P3_D65_TO_P3_P3_DCI","P3_D65_TO_PRO_PHOTO_D50","P3_P3_DCI_TO_ADOBE_1998_D65","P3_P3_DCI_TO_ADOBE_WIDE_D50","P3_P3_DCI_TO_AP0_D60","P3_P3_DCI_TO_AP1_D60","P3_P3_DCI_TO_APPLE_D65","P3_P3_DCI_TO_BT_2020_D65","P3_P3_DCI_TO_BT_709_D65","P3_P3_DCI_TO_CIE_RGB_E","P3_P3_DCI_TO_CIE_XYZ_D65","P3_P3_DCI_TO_P3_D60","P3_P3_DCI_TO_P3_D65","P3_P3_DCI_TO_PRO_PHOTO_D50","PRO_PHOTO_D50_TO_ADOBE_1998_D65","PRO_PHOTO_D50_TO_ADOBE_WIDE_D50","PRO_PHOTO_D50_TO_AP0_D60","PRO_PHOTO_D50_TO_AP1_D60","PRO_PHOTO_D50_TO_APPLE_D65","PRO_PHOTO_D50_TO_BT_2020_D65","PRO_PHOTO_D50_TO_BT_709_D65","PRO_PHOTO_D50_TO_CIE_RGB_E","PRO_PHOTO_D50_TO_CIE_XYZ_D65","PRO_PHOTO_D50_TO_P3_D60","PRO_PHOTO_D50_TO_P3_D65","PRO_PHOTO_D50_TO_P3_P3_DCI","const_conversion_matrix","Mat3","Vec3","CIELAB_to_CIELCh","CIELAB_to_XYZ","CIELCh_to_CIELAB","CIELCh_to_XYZ","CIE_1960_UCS_to_XYZ","CIE_1960_UCS_to_uvV","CIE_1960_UCS_uvV_to_XYZ","CIE_1960_uvV_to_UCS","CIE_1960_uvV_to_xyV","CIE_1960_xyV_to_uvV","CIE_1964_UVW_to_XYZ","CIE_1976_Luv_to_XYZ","ColorTransform","ICtCp","Oklab_to_XYZ","Oklch_to_XYZ","XYZ_to_CIELAB","XYZ_to_CIELCh","XYZ_to_CIE_1960_UCS","XYZ_to_CIE_1960_UCS_uvV","XYZ_to_CIE_1964_UVW","XYZ_to_CIE_1976_Luv","XYZ_to_Oklab","XYZ_to_Oklch","XYZ_to_xyY","apply","borrow","borrow_mut","bt601_oetf","bt601_oetf_inverse","clone","clone_into","from","hlg","hsx","into","new","pq","sRGB_eotf","sRGB_oetf","to_owned","try_from","try_into","type_id","xyY_to_XYZ","ICtCp_HLG_to_RGB","ICtCp_PQ_to_RGB","RGB_to_ICtCp_HLG","RGB_to_ICtCp_PQ","ARIB_HLG_oetf","ARIB_HLG_oetf_inverse","HSI_to_RGB","HSL_to_RGB","HSV_to_RGB","RGB_to_HSI","RGB_to_HSL","RGB_to_HSV","ST_2084_PQ_eotf","ST_2084_PQ_eotf_float","ST_2084_PQ_eotf_inverse","ST_2084_PQ_eotf_inverse_float","rgb_to_xyz","xyz_to_rgb","ACES2065_1","ACES_CG","ADOBE_1998","ADOBE_WIDE","ALL_COLOR_SPACES","APPLE","BT_2020","BT_709","CIE_RGB","CIE_XYZ","DISPLAY_P3","ENCODED_BT_2020","ENCODED_BT_2100_PQ","ENCODED_BT_709","ENCODED_DISPLAY_P3","ENCODED_SRGB","ICtCp_HLG","ICtCp_PQ","LINEAR_SRGB","OKLAB","OKLCH","P3_D60","P3_THEATER","PRO_PHOTO"],"q":["kolorkolor::details","","","","","","","kolor::details::cat","","","","","","","","","","","","","","","kolor::details::color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kolor::details::color::color_spaces","","","","","","","","","","","","","","","","","","","","","","","","kolor::details::conversion","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kolor::details::generated_matrices","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kolor::details::math","","kolor::details::transform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kolor::details::transform::ICtCp","","","","kolor::details::transform::hlg","","kolor::details::transform::hsx","","","","","","kolor::details::transform::pq","","","","kolor::details::xyz","","kolor::spaces","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The unit axes.","[Color] is a 3-component vector defined in a [ColorSpace].","[ColorConversion] defines an operation that maps a …","A color space defined in data by its [Primaries][…","","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 column major matrix.","All ones.","A 3-dimensional vector without SIMD support.","<code>[1, 0, 0]</code>: a unit-length vector pointing along the …","<code>[0, 1, 0]</code>: a unit-length vector pointing along the …","<code>[0, 0, 1]</code>: a unit-length vector pointing along the …","A 3x3 matrix with all elements set to <code>0.0</code>.","All zeroes.","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","","Adds two 3x3 matrices.","Returns the angle (in radians) between two vectors.","Returns somes vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to [<code>f32::clamp</code>]…","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>>=</code> …","Returns a vector mask containing the result of a <code>></code> …","Returns a vector mask containing the result of a <code><=</code> …","Returns a vector mask containing the result of a <code><</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Creates a <code>Mat3</code> from three column vectors that can be used …","Computes the cross product of <code>self</code> and <code>other</code>.","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","","","","","Computes the dot product of <code>self</code> and <code>other</code>.","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","","","","","","","","Returns a vector containing the fractional part of the …","","","","","","","","","","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","Creates an affine transformation matrix from the given 2D …","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3x3 matrix from three column vectors.","Creates a 3x3 matrix from a <code>[S; 9]</code> array stored in column …","Creates a 3x3 matrix from a <code>[[S; 3]; 3]</code> 2D array stored …","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> …","Creates a 3D rotation matrix from the given euler …","Creates an affine transformation matrix from the given …","Creates a 3x3 matrix from a 4x4 matrix, discarding the …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given 2D …","Creates a vector from the first N values in <code>slice</code>.","Creates an affine transformation matrix from the given 2D …","","","","","","","","","Returns the inverse of <code>self</code>.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Returns whether <code>self</code> is length <code>1.0</code> or not.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>other</code> …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the mininum values for each …","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","Multiplies two 3x3 matrices.","Multiplies a 3x3 matrix by a scalar.","Transforms a 3D vector.","Transforms a <code>Vec3A</code>.","","","Creates a new 3D vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns a vector containing each element of <code>self</code> raised …","","","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns the vector projection of <code>self</code> onto <code>other</code>.","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns the vector rejection of <code>self</code> from <code>other</code>.","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","Returns a vector with elements representing the sign of …","","","Creates a vector with all elements set to <code>v</code>.","","","","","","","Subtracts two 3x3 matrices.","","","<code>[x, y, z]</code>","Creates a <code>[S; 9]</code> array storing data in column major order.…","Creates a <code>[[S; 3]; 3]</code> 2D array storing data in column …","","","","","","","","Transforms the given 2D vector as a point.","Rotates the given 2D vector.","Returns the transpose of <code>self</code>.","Creates a <code>Vec2</code> from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","Writes the columns of <code>self</code> to the first 9 elements in …","Writes the elements of <code>self</code> to the first N elements in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implements Chromatic Adaptation Transformation (CAT).","","","","","","","","","","","","","","","","","","","","","","Incandescent/tungsten","","","","","","Old direct sunlight at noon","","The BT.601/BT.709/BT.2020 (they are equivalent) OETF and …","BT.709 is the sRGB primaries.","Old daylight","CIELAB transform","CIELCh transform","CIE 1960 UCS transform","CIE 1960 UCS transform in uvV form","CIE 1964 UVW transform","CIE 1976 Luv transform","","The reference XYZ color space","CIE xyY transform","[Color] is a 3-component vector defined in a [ColorSpace].","A color space defined in data by its [Primaries][…","ICC profile PCS","Mid-morning daylight","","Daylight, sRGB, Adobe-RGB","North sky daylight","Equal energy","","","","Ultralume 40, Philips TL84","Cool fluorescent","Daylight fluorescent, D65 simulator","(Hue, Saturation, Intensity), where I is defined as the …","(Hue, Saturation, Lightness), where L is defined as the …","(Hue, Saturation, Value), where V is defined as the …","BT.2100 ICtCp with HLG transfer function","BT.2100 ICtCp with PQ transfer function","","","","Oklab conversion from xyz","Oklch (Oklab’s LCh variant) conversion from xyz","P3 is the primaries for DCI-P3 and the variations with …","P3-DCI white point, sort of greenish","SMPTE ST 2084:2014 aka “Perceptual Quantizer” …","","[RGBPrimaries] is a set of primary colors picked to …","A [TransformFn] identifies an invertible mapping of …","A [WhitePoint] defines the color “white” in an RGB …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the color space has a non-linear transform applied","","","","The sRGB transfer functions (aka “gamma correction”)","","","","","","Equivalent to …","Returns a [Color] with this color converted into the …","Creates a CIE uvV color space using this space’s white …","Creates a CIE LAB color space using this space’s white …","Creates a CIE LCh color space using this space’s white …","","","","","","","","","","","","","","","","","","","Creates a new color space with the primaries and …","Creates a new color space with the primaries and white …","Creates a new color space with the transform function and …","ACES2065-1 is a linear encoding in [AP0 primaries][…","ACEScg is a linear encoding in [AP1 primaries][…","Adobe RGB (1998) is a linear encoding in [Adobe 1998 …","Adobe Wide Gamut RGB is a linear encoding in [Adobe Wide …","Array containing all built-in color spaces.","Apple RGB is a linear encoding in [Apple primaries][…","BT.2020 is a linear encoding in [BT.2020 primaries][…","BT.709 is a linear encoding in [BT.709 primaries][…","CIE RGB is the original RGB space, defined in [CIE RGB …","CIE XYZ reference color space. Uses [CIE XYZ primaries][…","Display P3 by Apple is a linear encoding in [P3 primaries]…","Encoded BT.2020 is BT.2020 with the [BT.2020 OETF][…","Encoded BT.2100 PQ is BT.2020 (equivalent to the linear …","Encoded BT.709 is BT.709 with the BT.709 OETF applied.","Encoded Display P3 is [Display P3][DISPLAY_P3] with the …","Encoded sRGB is [Linear sRGB][LINEAR_SRGB] with the sRGB …","ICtCp_HLG is a non-linear encoding in [BT.2020 primaries][…","ICtCp_PQ is a non-linear encoding in [BT.2020 primaries][…","Linear sRGB is a linear encoding in [BT.709 primaries][…","Oklab is a non-linear, perceptual encoding in [XYZ][…","Oklch is a non-linear, perceptual encoding in [XYZ][…","P3-D60 (ACES Cinema) is a linear encoding in [P3 primaries…","P3-DCI (Theater) is a linear encoding in [P3 primaries][…","Pro Photo RGB is a linear encoding in [Pro Photo primaries…","[ColorConversion] defines an operation that maps a …","A transformation from one linear color space to anotherx3 column major matrix.","A 3-dimensional vector without SIMD support.","","","","","","","","","","","","","[ColorTransform] represents a reference to a function …","BT.2100 ICtCp","","","","","","","","","","","","","","","","","","","","ARIB STD-B67 or “Hybrid Log-Gamma” used in BT.2100","transforms for Hue/Saturation/X color models, like HSL, …","","","SMPTE ST 2084:2014 EOTF aka “Perceptual Quantizer” …","Applies the sRGB EOTF (electro-optical transfer …","Applies the sRGB OETF (opto-eletronic transfer function), …","","","","","","Inverse ICtCp with the HLG transfer function","Inverse ICtCp with the PQ transfer function","ICtCp with the HLG transfer function","ICtCp with the PQ transfer function","ARIB STD-B67 or “Hybrid Log-Gamma”","Inverse of ARIB STD-B67 or “Hybrid Log-Gamma”","","","","","","","SMPTE ST 2084:2014 perceptual electro-optical transfer …","SMPTE ST 2084:2014 perceptual electo-optical transfer …","SMPTE ST 2084:2014 perceptual electo-optical transfer …","SMPTE ST 2084:2014 perceptual electo-optical transfer …","","","ACES2065-1 is a linear encoding in [AP0 primaries][…","ACEScg is a linear encoding in [AP1 primaries][…","Adobe RGB (1998) is a linear encoding in [Adobe 1998 …","Adobe Wide Gamut RGB is a linear encoding in [Adobe Wide …","Array containing all built-in color spaces.","Apple RGB is a linear encoding in [Apple primaries][…","BT.2020 is a linear encoding in [BT.2020 primaries][…","BT.709 is a linear encoding in [BT.709 primaries][…","CIE RGB is the original RGB space, defined in [CIE RGB …","CIE XYZ reference color space. Uses [CIE XYZ primaries][…","Display P3 by Apple is a linear encoding in [P3 primaries]…","Encoded BT.2020 is BT.2020 with the [BT.2020 OETF][…","Encoded BT.2100 PQ is BT.2020 (equivalent to the linear …","Encoded BT.709 is BT.709 with the BT.709 OETF applied.","Encoded Display P3 is [Display P3][DISPLAY_P3] with the …","Encoded sRGB is [Linear sRGB][LINEAR_SRGB] with the sRGB …","ICtCp_HLG is a non-linear encoding in [BT.2020 primaries][…","ICtCp_PQ is a non-linear encoding in [BT.2020 primaries][…","Linear sRGB is a linear encoding in [BT.709 primaries][…","Oklab is a non-linear, perceptual encoding in [XYZ][…","Oklch is a non-linear, perceptual encoding in [XYZ][…","P3-D60 (ACES Cinema) is a linear encoding in [P3 primaries…","P3-DCI (Theater) is a linear encoding in [P3 primaries][…","Pro Photo RGB is a linear encoding in [Pro Photo primaries…"],"i":[1,0,0,0,0,2,0,1,0,1,1,1,2,1,1,2,1,2,1,1,2,1,1,2,1,1,1,1,2,1,1,2,1,2,1,1,3,4,5,2,1,3,4,5,2,1,1,1,1,1,1,3,4,5,2,1,3,4,5,2,1,1,1,1,1,1,1,2,2,0,1,2,1,2,1,2,1,3,4,2,1,0,2,1,1,1,1,1,1,1,3,5,2,1,1,1,1,3,4,5,2,2,1,1,1,3,4,5,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,1,1,3,4,5,2,1,2,2,1,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,2,2,1,1,2,2,2,2,3,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,3,4,2,1,1,4,0,1,2,1,1,2,1,1,2,2,1,1,2,2,3,4,5,2,1,2,1,2,2,2,1,3,4,5,2,1,3,4,5,2,1,1,3,4,5,2,1,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,6,6,6,0,6,6,6,6,0,6,6,0,6,6,6,7,8,8,8,8,8,7,8,9,8,7,9,9,9,9,9,9,8,8,9,0,0,7,7,7,7,7,7,9,8,7,7,7,7,9,9,9,9,9,9,8,7,9,9,8,7,9,8,0,0,0,3,9,8,7,9,8,7,9,8,7,9,8,7,0,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,3,3,4,3,9,9,8,7,4,4,4,4,3,3,3,4,9,8,7,3,9,8,7,9,8,7,9,8,7,4,8,7,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,10,10,10,10,10,5,5,10,5,5,5,10,10,10,10,10,5,5,5,10,10,10,5,10,10,5,5,5,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,0,0,11,11,11,0,0,11,11,0,0,0,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["vec3",3]],[[["mat3",3],["f32",15]],["bool",15]],[[["vec3",3],["f32",15]],["bool",15]],[[["mat3",3]]],[[["f32",15]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["mat3",3]]],[[["vec3",3]]],[[["f32",15]]],[[["mat3",3]],["mat3",3]],[[["vec3",3]],["f32",15]],[[],["vec3",3]],[[]],[[],["vec3",3]],[[],["dmat3",3]],[[],["dvec3",3]],[[],["ivec3",3]],[[]],[[]],[[]],[[]],[[],["uvec3",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["f32",15]],["vec3",3]],[[["f32",15]],["vec3",3]],[[["f32",15]],["vec3",3]],[[],["colorspace",3]],[[],["color",3]],[[],["colorconversion",3]],[[],["mat3",3]],[[],["vec3",3]],[[]],[[]],[[]],[[]],[[]],[[["vec3",3]],["bvec3",3]],[[["vec3",3]],["bvec3",3]],[[["vec3",3]],["bvec3",3]],[[["vec3",3]],["bvec3",3]],[[["vec3",3]],["bvec3",3]],[[["vec3",3]],["bvec3",3]],[[["usize",15]],["vec3",3]],[[["usize",15]],["vec3",3]],null,[[["vec3",3]],["vec3",3]],[[],["mat3",3]],[[],["vec3",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],[["mat3",3],["result",4]]],[[],[["vec3",3],["result",4]]],null,[[],["f32",15]],[[["vec3",3]],["f32",15]],[[["vec3",3]],["f32",15]],[[["vec3",3]],["vec3",3]],[[["f32",15]],["vec3",3]],[[["vec3",3]]],[[["f32",15]]],[[["vec3",3]],["f32",15]],[[["colorspace",3]],["bool",15]],[[],["bool",15]],[[["mat3",3]],["bool",15]],[[["vec3",3]],["bool",15]],[[],["vec3",3]],[[["f32",15]],["vec4",3]],[[],["vec3",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["vec3",3]],[[]],[[]],[[]],[[["mat3a",3]],["mat3",3]],[[]],[[["affine2",3]],["mat3",3]],[[],["vec3",3]],[[],["vec3",3]],[[["vec3a",3]],["vec3",3]],[[["vec4",3]],["vec3",3]],[[],["vec3",3]],[[]],[[["xyz",3],["f32",15]],["vec3",3]],[[["f32",15]],["mat3",3]],[[["vec3",3],["f32",15]],["mat3",3]],[[["vec3",3]],["mat3",3]],[[],["mat3",3]],[[],["mat3",3]],[[],["mat3",3]],[[["vec3",3]],["mat3",3]],[[["eulerrot",4],["f32",15]],["mat3",3]],[[["mat2",3]],["mat3",3]],[[["mat4",3]],["mat3",3]],[[["quat",3]],["mat3",3]],[[["f32",15]],["mat3",3]],[[["f32",15]],["mat3",3]],[[["f32",15]],["mat3",3]],[[["vec2",3]],["mat3",3]],[[["vec2",3],["f32",15]],["mat3",3]],[[],["vec3",3]],[[["vec2",3]],["mat3",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["mat3",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bvec3",3]],[[],["bool",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["vec3",3],["f32",15]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[],["f32",15]],[[["vec3",3]],["vec3",3]],[[],["f32",15]],[[["affine2",3]]],[[["f32",15]]],[[["vec3",3]]],[[["vec3a",3]],["vec3a",3]],[[["mat3",3]]],[[["vec3",3]],["vec3",3]],[[["f32",15]],["vec3",3]],[[["mat3",3]]],[[["f32",15]]],[[["f32",15]]],[[["vec3",3]]],[[["mat3",3]],["mat3",3]],[[["f32",15]],["mat3",3]],[[["vec3",3]],["vec3",3]],[[["vec3a",3]],["vec3a",3]],[[["colorspace",3]],["bool",15]],[[],["vec3",3]],[[["f32",15]],["vec3",3]],[[],["vec3",3]],[[],["vec3",3]],[[["f32",15]],["vec3",3]],[[],["mat3",3]],[[],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[],["vec3",3]],[[["usize",15]],["vec3",3]],[[["vec3",3],["bvec3",3]],["vec3",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["vec3",3]],null,null,[[["f32",15]],["vec3",3]],[[["mat3",3]]],[[["vec3",3]],["vec3",3]],[[["f32",15]],["vec3",3]],[[["mat3",3]]],[[["f32",15]]],[[["vec3",3]]],[[["mat3",3]],["mat3",3]],[[],["mat3",3]],[[],["vec3",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[["vec2",3]],["vec2",3]],[[["vec2",3]],["vec2",3]],[[],["mat3",3]],[[],["vec2",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["option",4],["vec3",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec2",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec3",3]],[[],["vec4",3]],[[],["vec4",3]],[[],["vec4",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["vec3",3],["lmsconespace",4]],["mat3",3]],[[]],[[]],[[["lmsconespace",4]],["mat3",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["transformfn",4]],[[],["rgbprimaries",4]],[[],["whitepoint",4]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["transformfn",4]],["bool",15]],[[["rgbprimaries",4]],["bool",15]],[[["whitepoint",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["transformfn",4],["rgbprimaries",4],["whitepoint",4]]],[[["colorspace",3],["ftype",6]]],[[],["rgbprimaries",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["colorspace",3]],null,[[["ftype",6]]],[[["colorspace",3]],["color",3]],[[]],[[]],[[]],[[],["color",3]],[[]],[[]],[[]],[[],["transformfn",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],["whitepoint",4]],[[["rgbprimaries",4]]],[[["transformfn",4]]],[[["whitepoint",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[]],[[]],[[],["linearcolorconversion",3]],[[]],[[["vec3",3]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[]],[[],["result",4]],[[],["colorspace",3]],[[],[["option",4],["colortransform",3]]],[[],["transformfn",4]],[[["linearcolorconversion",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["colorspace",3]],[[]],[[]],[[],["bool",15]],[[],["linearcolorconversion",3]],[[],["mat3",3]],[[["linearcolorconversion",3]],["bool",15]],[[["colorspace",3]]],[[["colorspace",3]]],[[],["colorspace",3]],[[],["result",4]],[[],["colorspace",3]],[[],[["option",4],["colortransform",3]]],[[],["transformfn",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["rgbprimaries",4],["whitepoint",4]],[["option",4],["mat3",3]]],null,null,[[["vec3",3]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],null,null,[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[]],[[]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[],["colortransform",3]],[[]],[[]],null,null,[[]],[[["transformfn",4]],["option",4]],null,[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["ftype",6]],["ftype",6]],[[["vec3",3],["whitepoint",4]],["vec3",3]],[[["ftype",6]],["ftype",6]],[[],["mat3",3]],[[],["mat3",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"Vec3"],[3,"Mat3"],[3,"ColorSpace"],[3,"Color"],[3,"ColorConversion"],[4,"LMSConeSpace"],[4,"WhitePoint"],[4,"RGBPrimaries"],[4,"TransformFn"],[3,"LinearColorConversion"],[3,"ColorTransform"]]},\
"libm":{"doc":"libm in pure Rust","t":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["acos","acosf","acosh","acoshf","asin","asinf","asinh","asinhf","atan","atan2","atan2f","atanf","atanh","atanhf","cbrt","cbrtf","ceil","ceilf","copysign","copysignf","cos","cosf","cosh","coshf","erf","erfc","erfcf","erff","exp","exp10","exp10f","exp2","exp2f","expf","expm1","expm1f","fabs","fabsf","fdim","fdimf","floor","floorf","fma","fmaf","fmax","fmaxf","fmin","fminf","fmod","fmodf","frexp","frexpf","hypot","hypotf","ilogb","ilogbf","j0","j0f","j1","j1f","jn","jnf","ldexp","ldexpf","lgamma","lgamma_r","lgammaf","lgammaf_r","log","log10","log10f","log1p","log1pf","log2","log2f","logf","modf","modff","nextafter","nextafterf","pow","powf","remainder","remainderf","remquo","remquof","round","roundf","scalbn","scalbnf","sin","sincos","sincosf","sinf","sinh","sinhf","sqrt","sqrtf","tan","tanf","tanh","tanhf","tgamma","tgammaf","trunc","truncf","y0","y0f","y1","y1f","yn","ynf"],"q":["libm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Arccosine (f64)","Arccosine (f32)","Inverse hyperbolic cosine (f64)","Inverse hyperbolic cosine (f32)","Arcsine (f64)","Arcsine (f32)","Inverse hyperbolic sine (f64)","Inverse hyperbolic sine (f32)","Arctangent (f64)","Arctangent of y/x (f64)","Arctangent of y/x (f32)","Arctangent (f32)","Inverse hyperbolic tangent (f64)","Inverse hyperbolic tangent (f32)","Computes the cube root of the argument.","Cube root (f32)","Ceil (f64)","Ceil (f32)","Sign of Y, magnitude of X (f64)","Sign of Y, magnitude of X (f32)","","","Hyperbolic cosine (f64)","Hyperbolic cosine (f64)","Error function (f64)","Error function (f64)","Error function (f32)","Error function (f32)","Exponential, base <em>e</em> (f64)","","","Exponential, base 2 (f64)","Exponential, base 2 (f32)","Exponential, base <em>e</em> (f32)","Exponential, base <em>e</em>, of x-1 (f64)","Exponential, base <em>e</em>, of x-1 (f32)","Absolute value (magnitude) (f64) Calculates the absolute …","Absolute value (magnitude) (f32) Calculates the absolute …","Positive difference (f64)","Positive difference (f32)","Floor (f64)","Floor (f32)","Floating multiply add (f64)","Floating multiply add (f32)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["i32",15],["f32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["i32",15],["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]]],[[["f32",15]],["f32",15]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["i32",15],["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]]],[[["f32",15]]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["i32",15],["f32",15]],["f32",15]]],"p":[]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[13,4,16,13,8,8,8,8,8,8,3,8,11,11,11,11,0,0,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,0,0,0,0,11,11,11,11,11,11,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["Empty","FloatErrorKind","FromStrRadixErr","Invalid","Num","NumAssign","NumAssignOps","NumAssignRef","NumOps","NumRef","ParseFloatError","RefNum","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","ops","pow","real","sign","try_from","try_from","try_into","try_into","type_id","type_id","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","","The trait for references which implement numeric …","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","","","Convert from a string and radix (typically <code>2..=36</code>).","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If …","Returns the floating point category of the number. If …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have…","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[1,0,2,1,0,0,0,0,0,0,0,0,1,3,1,3,0,0,0,0,0,0,1,3,3,1,3,2,0,0,1,3,3,0,0,0,0,1,3,1,3,1,3,0,4,4,0,0,0,0,5,0,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,0,0,0,9,9,9,9,9,9,9,9,9,10,11,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,11,10,10,10,10,10,11,10,11,10,11,10,11,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,11,10,10,11,11,10,11,10,10,11,10,11,10,11,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,11,10,10,11,0,0,12,13,0,12,12,13,0,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,19,20,21,22,0,23,23,0,0,24,24,25,0,0,0,26,27,28,0,0,0,0,29,30,31,29,32,0,0,0,0,0,0,33,34,35,36,37,38,39,0,0,0,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,41,0,41,41,41,0,41],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15],["str",15]],["result",4]],null,null,[[]],[[]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,[[]],[[["numcast",8]],[["option",4],["numcast",8]]],[[["toprimitive",8]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["isize",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["one",8]],[[]],[[]],[[]],[[],["zero",8]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["usize",15],["checkedmul",8],["one",8],["clone",8]],[["option",4],["checkedmul",8],["one",8],["clone",8]]],[[["mul",8],["usize",15],["one",8],["clone",8]],[["mul",8],["one",8],["clone",8]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["signed",8]],["signed",8]],[[]],[[["signed",8]],["signed",8]],[[]],[[],["bool",15]],[[],["bool",15]],[[["signed",8]],["signed",8]],[[]]],"p":[[4,"FloatErrorKind"],[8,"Num"],[3,"ParseFloatError"],[8,"Bounded"],[8,"AsPrimitive"],[8,"NumCast"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"One"],[8,"Zero"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"],[8,"Signed"]]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the compiler…","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","IntoIter","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::token_stream","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>\'</code> is <code>Joint</code> in <code>\'#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>\\\"hello\\\"</code>), byte string (<code>b\\\"hello\\\"</code>), …","A literal character (<code>\'a\'</code>), string (<code>\\\"hello\\\"</code>), number (<code>2.3</code>…","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural …","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","","","","","","","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of …","Returns the span pointing to the opening delimiter of …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","","","","","","",""],"i":[1,2,2,0,0,3,0,3,1,0,0,3,2,2,0,3,0,0,0,0,4,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,7,10,6,7,3,8,2,4,1,9,10,6,7,3,8,2,4,1,9,10,9,6,8,2,1,9,9,6,6,10,10,10,10,5,5,6,6,7,3,3,8,8,2,4,4,1,9,9,10,10,5,6,6,6,7,7,3,3,3,3,3,8,2,4,1,9,10,6,6,6,10,9,10,10,10,10,10,10,10,10,10,10,5,6,7,3,8,2,4,1,9,10,6,6,10,10,7,7,7,6,8,4,9,9,7,3,8,4,9,10,4,5,3,8,4,9,10,8,8,8,10,10,6,7,3,8,2,4,1,9,10,5,6,3,8,4,9,10,0,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,10,10,10,10,10,10,10,10,10,7,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["char",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["literal",3]],[[],["span",3]],[[["char",15]],["literal",3]],[[],["tokenstream",3]],[[],["span",3]],[[],["tokentree",4]],[[],["group",3]],[[],["delimiter",4]],[[],["punct",3]],[[],["spacing",4]],[[],["ident",3]],[[],["literal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ident",3]],["ordering",4]],[[]],[[],["delimiter",4]],[[["delimiter",4]],["bool",15]],[[["spacing",4]],["bool",15]],[[],["bool",15]],[[["ident",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["f32",15]],["literal",3]],[[["f32",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["tokenstream",3]],["tokenstream",3]],[[["tokentree",4]]],[[]],[[["span",3]],["span",3]],[[["literal",3]],["tokentree",4]],[[["punct",3]],["tokentree",4]],[[["group",3]],["tokentree",4]],[[]],[[["ident",3]],["tokentree",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["str",15]],[["tokenstream",3],["lexerror",3],["result",4]]],[[["str",15]],[["result",4],["lexerror",3]]],[[]],[[["i128",15]],["literal",3]],[[["i128",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i8",15]],["literal",3]],[[["i8",15]],["literal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[],["bool",15]],[[["isize",15]],["literal",3]],[[["isize",15]],["literal",3]],[[["span",3]],[["span",3],["option",4]]],[[["span",3]],["span",3]],[[],["span",3]],[[],["tokenstream",3]],[[["tokenstream",3],["delimiter",4]],["group",3]],[[["spacing",4],["char",15]],["punct",3]],[[["str",15],["span",3]],["ident",3]],[[["ident",3]],[["option",4],["ordering",4]]],[[["span",3]],["span",3]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[],["spacing",4]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["tokenstream",3]],[[["str",15]],["literal",3]],[[["usize",15],["rangebounds",8]],[["span",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u128",15]],["literal",3]],[[["u128",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u8",15]],["literal",3]],[[["u8",15]],["literal",3]],[[],["span",3]],[[["usize",15]],["literal",3]],[[["usize",15]],["literal",3]],null,[[]],[[]],[[],["intoiter",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["option",4],["tokentree",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Spacing"],[4,"Delimiter"],[4,"TokenTree"],[3,"Punct"],[3,"LexError"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Ident"],[3,"Literal"],[3,"IntoIter"]]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,8,8,10,10,10,10,10,14,11,11,14,14,11,11,11,11,10],"n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,2,0,3,3,0,0,2,2,3,3,3],"f":[null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],null,[[],["tokenstream",3]],[[],["tokenstream",3]],null,null,[[],[["option",4],["span",3]]],[[],[["option",4],["span",3]]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[["tokenstream",3]]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"serde":{"doc":"Serde","t":[8,8,16,16,16,8,16,16,16,16,16,16,16,8,11,11,11,0,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,14,11,11,0,14,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,13,13,13,8,8,8,8,16,13,8,8,16,16,16,16,16,8,13,3,8,13,8,13,13,13,13,13,8,13,13,13,13,4,13,13,13,16,16,16,8,8,11,11,11,11,11,11,11,11,10,11,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,10,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,16,16,16,16,16,16,3,16,16,16,16,16,16,16,16,8,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11],"n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","ne","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":["serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::deserde::de::valueserde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during …","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of …","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&[u8]</code> or <code>Vec<u8></code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not …","The input contained a newtype variant that was not …","The input contained an <code>Option<T></code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","The input contained a <code>&str</code> or <code>String</code> that was not …","The input contained a struct variant that was not …","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or …","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects …","","Format an explanation of what data was being expected. …","","","","","","","","","","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to …","<code>variant</code> is called to identify which variant to …","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string …","","The input contains a string and ownership of the string …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&str</code> with a lifetime tied to …","A deserializer holding a <code>&[u8]</code>. Always calls […","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow<str></code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new borrowed deserializer from the given string.","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given …","Construct a new <code>MapDeserializer<I, E></code>.","Construct a new <code>SeqDeserializer<I, E></code>.","Construct a new <code>SeqAccessDeserializer<A></code>.","Construct a new <code>MapAccessDeserializer<A></code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during …","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for …","A <strong>data format</strong> that can serialize any data structure …","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of …","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","","","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,1,2,2,0,2,2,2,2,2,2,2,0,2,2,2,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,2,0,0,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,0,0,0,0,6,5,0,0,1,7,8,9,10,0,5,0,0,5,0,5,5,5,5,5,0,5,5,5,5,0,5,5,5,11,12,9,0,0,13,5,13,5,13,5,13,5,14,13,3,11,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,5,12,13,15,15,13,13,5,5,13,5,13,5,6,14,14,14,1,14,5,10,10,7,7,8,8,8,8,8,8,7,8,10,13,5,5,13,5,13,5,10,13,5,10,14,14,0,9,9,12,13,12,12,12,12,13,12,12,13,12,12,13,12,13,12,12,12,13,12,12,13,12,13,12,13,12,13,12,13,12,13,12,12,13,12,12,12,13,12,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,25,25,25,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,24,41,25,16,17,18,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,25,19,22,23,24,41,42,43,24,41,24,24,24,24,24,41,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,25,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,17,18,19,20,21,43,0,2,44,45,46,47,48,49,50,0,2,44,45,46,47,48,49,50,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,51,51,2,2,2,52,44,45,46,47,48,49,50,51,51,51,51,51,51,51,51,51,2,4,2,2,2,44,45,51,51,48,2,2,46,47,49,50,51,51,51,51,2,2,2,2,2,48,51,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,48,51,49,50,51,51,51],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],null,[[],["bool",15]],[[],["bool",15]],null,null,[[],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[],["result",4]],[[["usize",15],["option",4]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["ignoredany",3]],[[],["unexpected",4]],[[]],[[]],[[]],[[],["ignoredany",3]],[[],["result",4]],[[],["result",4]],[[],[["ignoredany",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]]],[[["unexpected",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["unexpected",4],["expected",8]]],[[],["bool",15]],[[["str",15]]],[[["unexpected",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],[["result",4],["option",4]]],[[],[["option",4],["result",4]]],[[],[["option",4],["result",4]]],[[],[["option",4],["result",4]]],[[],[["option",4],["result",4]]],[[],["result",4]],[[],["result",4]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["result",4]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[["str",15]]],[[["str",15]]],null,[[],["result",4]],[[],["result",4]],[[["bool",15]],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["vec",3],["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["f64",15]],["result",4]],[[["i128",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["string",3]],["result",4]],[[["u128",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seqdeserializer",3]],[[],["seqaccessdeserializer",3]],[[],["mapaccessdeserializer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["error",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["bool",15]],[[["str",15]],["borrowedstrdeserializer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["option",4]]],[[],[["result",4],["option",4]]],[[],[["result",4],["option",4]]],[[],[["result",4],["option",4]]],[[],["result",4]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["bool",15]],[[],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[],["result",4]],[[["usize",15],["option",4]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[8,"Deserializer"],[8,"Serializer"],[8,"Deserialize"],[8,"Serialize"],[4,"Unexpected"],[8,"IntoDeserializer"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"DeserializeSeed"],[8,"Visitor"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Impossible"],[8,"Error"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":[24,24],"n":["Deserialize","Serialize"],"q":["serde_derive",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"syn":{"doc":"github crates-io docs-rs","t":[3,13,13,13,13,3,13,13,13,13,13,4,3,6,13,13,3,4,13,3,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,3,3,13,13,13,13,4,3,3,3,13,13,3,13,13,13,13,13,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,13,4,3,3,13,13,13,4,4,3,13,13,13,3,13,3,13,3,13,13,13,13,13,13,13,3,13,13,13,13,3,13,4,13,13,3,3,3,3,3,3,3,13,13,3,13,13,4,13,13,4,4,13,3,3,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,3,3,13,13,13,4,3,3,3,3,13,13,3,13,13,13,13,13,13,13,13,6,13,4,13,13,13,13,13,13,4,13,13,13,13,14,13,3,4,13,13,13,13,13,3,4,13,13,13,13,13,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,4,13,13,13,13,13,13,3,3,13,13,13,3,3,3,4,3,4,13,13,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,14,12,12,12,12,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,12,12,12,14,14,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,0,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,14,11,11,11,11,14,5,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,0,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,18,10,3,3,3,16,8,3,6,8,8,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,13,3,3,3,3,4,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Bool","BoundLifetimes","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Eq","Eq","Error","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulEq","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Raw","Reference","Reference","Rem","RemEq","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlEq","Shr","ShrEq","Slice","Str","StrStyle","Struct","Struct","Sub","SubEq","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variadic","Variant","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","abi","and_token","apostrophe","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","const_params","const_params_mut","const_token","const_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","discriminant","display","display","display","display","display","display","display","display","display","display","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","get_ident","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_empty","is_ident","iter","iter_mut","leading_colon","left","len","len","lhs_ty","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lit","lt_token","lt_token","lt_token","lt_token","mac","make_where_clause","member","modifier","mutability","mutability","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","rhs_ty","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","variadic","variants","vis","vis","where_clause","where_token","without_plus","without_plus","without_plus","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["synsyn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::spanned","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The binary interface of a function: <code>extern \\\"C\\\"</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&&</code> operator (logical and)","The <code><\'a, T></code> in <code>std::slice::iter<\'a, T></code>.","Angle bracketed arguments of a path segment: the <code><K, V></code> …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -> bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: …","The <code>&</code> operator (bitwise and)","The <code>&=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for<\'a, \'b, \'c></code>.","A box expression: <code>box f</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>\'a\'</code>.","A closure expression: <code>|a, b| a + b</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator<Item: Display></code>.","An associated type bound: <code>Iterator<Item: Display></code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>\\\"data\\\"</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","A method call expression: <code>x.foo::<T>(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>>=</code> operator (greater than or equal to)","An individual generic argument, like <code>\'a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>></code> operator (greater than)","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code><=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>\'a</code>.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","A lifetime argument.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>\\\"new_name\\\"</code> in …","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A character literal: <code>\'a\'</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","Conditionless loop: <code>loop { ... }</code>.","The <code><</code> operator (less than)","A macro invocation: <code>println!(\\\"{}\\\", mac)</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::<T>(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -> C</code> in <code>Fn(A, B) -> C</code>.","Arguments of a function path segment: the <code>(A, B) -> C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A raw string like <code>r##\\\"data\\\"##</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code><<</code> operator (shift left)","The <code><<=</code> operator","The <code>>></code> operator (shift right)","The <code>>>=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code>…","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A generic type parameter: <code>T: Into<String></code>.","A type predicate in a <code>where</code> clause: …","A particular type is returned.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -> bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into<String></code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize<\'de></code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","Turn a type’s generics like <code><X, Y></code> into a turbofish …","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+\'static</code>)","","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content …","A stably addressed token buffer supporting efficient …eturns an Iterator<Item = &ConstParam> over the constant …","Returns an Iterator<Item = &mut ConstParam> over the …","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variantenerics required to complete the definition.","If this path consists of a single ident, returns the …","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","Name of the struct or enum.","","","","","","","","","<code>(A, B)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to …","Get an iterator over the borrowed [<code>Field</code>] items in this …","Get an iterator over the mutably borrowed [<code>Field</code>] items …","","","Returns the number of fields.","","","","","","Returns an Iterator<Item = &LifetimeDef> over the …","","The <code>for<\'a></code> in <code>for<\'a> Foo<&\'a T></code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator<Item = &mut LifetimeDef> over the …","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","","","","","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","","","<code>C</code>","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","Returns the identifier that begins this structured meta …","","","","","","The <code>Foo<&\'a T></code> in <code>for<\'a> Foo<&\'a T></code>","","","","","","","","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","","A trait that can provide the <code>Span</code> of the complete …","Split a type’s generics into the pieces required for …okens representing Rust punctuation, keywords, and …ype of the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator<Item = &TypeParam> over the type …","Returns an Iterator<Item = &mut TypeParam> over the type …","","","","","","","","","","","","","","Visibility of the field.","Visibility of the struct or enum.","","","In some positions, types may not contain the <code>+</code> character, …","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple …","Creates a cursor referencing the first token in the …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the …","","","","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","","","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","If the cursor is pointing at an <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or …","","Copies all remaining tokens visible from this cursor into …","If the cursor is pointing at a <code>TokenTree</code>, returns it …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","","","","","","","","","","","","Render the error as an invocation of <code>compile_error!</code>.","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Returns the <code>Span</code> of the next token in the parse stream, or…","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair<T, P></code>.","An iterator over borrowed values of type <code>&T</code>.","An iterator over mutably borrowed values of type <code>&mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair<&T, &P></code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","","","","","","","","","","","","","Inserts an element at position <code>index</code>.","","","","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Appends a syntax tree node onto the end of this …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&</code>","<code>&&</code>","<code>&=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=></code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>>=</code>","None-delimited group","<code>></code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code><-</code>","<code><=</code>","<code>let</code>","<code>loop</code>","<code><</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-></code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code><<</code>","<code><<=</code>","<code>>></code>","<code>>>=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codei":[0,1,1,1,2,0,3,4,3,3,3,0,0,0,3,4,0,0,3,0,5,1,1,1,1,1,1,3,6,0,3,7,7,3,6,6,3,3,6,3,8,5,0,0,5,3,9,10,0,0,0,0,11,12,0,1,1,13,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,6,3,1,0,0,0,3,4,1,0,3,0,4,0,3,4,10,15,6,1,3,0,8,16,14,5,0,17,0,18,3,0,0,0,0,0,0,0,3,1,0,3,4,0,3,19,0,0,18,0,0,3,1,1,17,20,21,1,12,0,4,19,2,12,1,15,3,7,4,2,0,0,17,3,4,0,0,0,0,0,4,10,0,3,9,3,4,1,1,3,10,0,3,0,1,1,1,1,4,6,0,3,13,1,1,0,16,0,0,4,3,3,3,4,0,0,3,8,14,11,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,13,20,20,21,3,0,0,3,6,4,0,0,0,0,0,0,3,3,22,23,24,25,26,27,28,29,30,31,32,33,25,28,34,35,36,37,38,39,40,41,42,43,44,45,46,47,34,48,49,48,49,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,95,40,41,95,96,108,115,120,55,104,0,52,35,106,114,0,0,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,33,25,28,34,35,36,37,38,39,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,33,25,28,34,35,36,37,38,39,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,24,122,26,32,40,41,42,95,96,120,91,91,42,113,58,0,0,43,91,92,2,40,42,46,31,24,6,98,99,100,101,48,49,102,122,34,45,115,106,107,111,113,23,114,116,104,24,21,90,122,122,54,40,42,97,119,28,35,37,39,0,117,31,103,105,24,21,90,48,49,122,122,122,22,92,50,30,51,24,52,15,17,17,17,17,53,54,18,18,18,31,20,20,20,55,56,32,10,10,10,10,57,58,59,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,21,21,21,90,90,91,8,8,8,8,40,40,41,42,92,16,16,16,93,19,94,14,14,14,14,95,96,97,6,6,6,6,6,6,6,6,98,99,100,101,48,48,49,49,102,9,46,7,43,13,13,13,13,103,104,105,1,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,118,27,27,2,5,26,119,120,121,29,122,122,122,122,122,122,122,25,43,118,107,91,92,26,29,24,21,90,122,24,31,32,40,42,43,27,119,120,108,59,35,90,22,121,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,20,20,2,118,20,20,118,33,20,106,97,41,96,23,91,92,93,95,22,91,54,36,91,92,26,29,110,91,34,93,113,23,117,44,55,53,24,41,6,98,99,100,101,48,49,102,122,33,39,22,121,91,53,56,59,25,37,93,22,111,116,121,0,0,0,24,17,53,54,18,31,55,56,10,3,36,38,21,90,91,8,40,41,42,92,16,93,19,94,14,6,98,98,99,100,101,48,49,102,46,43,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,11,118,27,5,26,119,121,122,0,122,52,52,46,46,52,0,52,118,32,52,0,0,32,98,24,122,17,52,53,54,59,38,93,46,112,24,6,98,99,100,101,48,49,102,122,29,52,94,57,59,0,38,112,97,33,118,103,106,24,6,98,99,100,101,48,49,102,122,50,30,51,24,24,52,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,21,90,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,6,98,98,99,99,100,100,101,101,48,48,49,49,102,102,46,43,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,122,122,122,90,102,0,91,113,103,52,6,98,99,100,101,48,49,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,33,25,28,34,35,36,37,38,39,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,24,48,49,122,50,30,51,24,52,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,46,43,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,122,0,52,46,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,32,28,42,44,119,29,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,91,91,109,105,56,122,22,98,99,100,101,102,102,22,104,32,43,91,94,4,115,11,0,0,123,123,124,123,124,124,124,124,124,124,123,124,124,124,123,124,124,124,123,123,124,124,124,124,124,123,124,123,124,123,124,0,125,125,125,0,0,0,126,0,0,0,0,0,0,0,127,128,127,129,130,131,128,127,129,130,131,127,129,131,129,131,131,127,129,0,127,128,127,129,131,127,127,131,131,127,128,127,129,130,131,131,128,127,129,130,131,131,131,127,127,131,131,132,127,126,130,126,126,127,128,127,127,127,127,131,127,131,129,131,127,131,128,127,129,130,131,128,127,129,130,131,128,127,129,130,131,0,133,134,0,0,0,0,0,0,0,0,134,135,136,137,138,139,140,141,134,135,136,137,138,139,140,141,134,135,135,136,138,139,140,134,135,136,138,139,140,134,135,135,135,135,135,135,135,136,137,138,139,140,141,134,135,135,135,135,135,135,136,137,138,139,140,141,134,135,136,137,138,139,140,141,135,134,134,135,135,135,135,135,135,136,137,138,139,140,141,135,134,136,137,138,139,140,141,136,137,138,139,140,141,135,135,135,135,135,135,135,134,135,135,135,136,137,138,139,140,141,135,134,135,136,138,139,140,134,135,134,135,135,136,137,138,139,140,141,134,135,136,137,138,139,140,141,134,135,136,137,138,139,140,141,134,134,134,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,196,198,201,202,203,205,207,208,210,211,215,218,220,223,226,227,230,233,238,239,241,143,196,198,201,202,203,205,207,208,210,211,215,218,220,223,226,227,230,233,238,239,241,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,242,243,244,245,143,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["turbofish",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["result",6]],[[],["resultnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ident",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lifetime",3]],["ordering",4]],[[["ident",3]],["ordering",4]],null,null,null,null,null,null,null,null,[[],["constparams",3]],[[],["constparamsmut",3]],null,null,null,null,null,null,[[]],[[]],[[]],null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,null,null,null,null,null,null,null,null,null,[[["lifetime",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ident",3]],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["path",3]],["meta",4]],[[["metalist",3]],["meta",4]],[[]],[[["metanamevalue",3]],["meta",4]],[[]],[[]],[[["meta",4]],["nestedmeta",4]],[[]],[[["lit",4]],["nestedmeta",4]],[[]],[[["fieldsunnamed",3]],["fields",4]],[[]],[[["fieldsnamed",3]],["fields",4]],[[]],[[]],[[]],[[]],[[["vispublic",3]],["visibility",4]],[[["viscrate",3]],["visibility",4]],[[["visrestricted",3]],["visibility",4]],[[]],[[]],[[]],[[["exprasync",3]],["expr",4]],[[["exprclosure",3]],["expr",4]],[[["exprbinary",3]],["expr",4]],[[["exprunary",3]],["expr",4]],[[["exprtype",3]],["expr",4]],[[["exprtuple",3]],["expr",4]],[[["exprtryblock",3]],["expr",4]],[[["exprblock",3]],["expr",4]],[[["exprtry",3]],["expr",4]],[[["exprstruct",3]],["expr",4]],[[["exprreturn",3]],["expr",4]],[[["exprrepeat",3]],["expr",4]],[[["exprreference",3]],["expr",4]],[[["exprrange",3]],["expr",4]],[[["exprbox",3]],["expr",4]],[[["exprassignop",3]],["expr",4]],[[["exprpath",3]],["expr",4]],[[["exprparen",3]],["expr",4]],[[["exprawait",3]],["expr",4]],[[["exprmethodcall",3]],["expr",4]],[[["exprmatch",3]],["expr",4]],[[]],[[["exprmacro",3]],["expr",4]],[[["exprloop",3]],["expr",4]],[[["exprlit",3]],["expr",4]],[[["expryield",3]],["expr",4]],[[["exprlet",3]],["expr",4]],[[["exprindex",3]],["expr",4]],[[["exprassign",3]],["expr",4]],[[["exprarray",3]],["expr",4]],[[["exprif",3]],["expr",4]],[[["exprbreak",3]],["expr",4]],[[["exprgroup",3]],["expr",4]],[[["exprforloop",3]],["expr",4]],[[["exprcall",3]],["expr",4]],[[["exprfield",3]],["expr",4]],[[["exprcontinue",3]],["expr",4]],[[["exprwhile",3]],["expr",4]],[[["exprcast",3]],["expr",4]],[[["exprunsafe",3]],["expr",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["index",3]],["member",4]],[[["usize",15]],["member",4]],[[["ident",3]],["member",4]],[[]],[[]],[[["usize",15]],["index",3]],[[]],[[["typeparam",3]],["genericparam",4]],[[]],[[["lifetimedef",3]],["genericparam",4]],[[["constparam",3]],["genericparam",4]],[[]],[[["ident",3]]],[[]],[[]],[[]],[[["traitbound",3]],["typeparambound",4]],[[]],[[["lifetime",3]],["typeparambound",4]],[[]],[[]],[[]],[[["predicatelifetime",3]],["wherepredicate",4]],[[]],[[["predicateeq",3]],["wherepredicate",4]],[[["predicatetype",3]],["wherepredicate",4]],[[]],[[]],[[]],[[["litint",3]],["lit",4]],[[["litbool",3]],["lit",4]],[[["litchar",3]],["lit",4]],[[["litfloat",3]],["lit",4]],[[["litbyte",3]],["lit",4]],[[["litstr",3]],["lit",4]],[[]],[[["litbytestr",3]],["lit",4]],[[]],[[]],[[]],[[]],[[]],[[["literal",3]]],[[["literal",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dataunion",3]],["data",4]],[[["datastruct",3]],["data",4]],[[]],[[["dataenum",3]],["data",4]],[[]],[[]],[[]],[[]],[[]],[[["typetuple",3]],["type",4]],[[["typenever",3]],["type",4]],[[["typebarefn",3]],["type",4]],[[["typegroup",3]],["type",4]],[[["typepath",3]],["type",4]],[[]],[[["typeimpltrait",3]],["type",4]],[[["typeparen",3]],["type",4]],[[["typeptr",3]],["type",4]],[[["typearray",3]],["type",4]],[[["typeinfer",3]],["type",4]],[[["typemacro",3]],["type",4]],[[["typeslice",3]],["type",4]],[[["typereference",3]],["type",4]],[[["typetraitobject",3]],["type",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["super",3]],["ident",3]],[[["selfvalue",3]],["ident",3]],[[["underscore",3]],["ident",3]],[[["extern",3]],["ident",3]],[[["selftype",3]],["ident",3]],[[]],[[["crate",3]],["ident",3]],null,null,[[],[["option",4],["ident",3]]],null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullbool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["iter",3],["field",3]]],[[],[["itermut",3],["field",3]]],null,null,[[],["usize",15]],null,null,null,null,null,[[],["lifetimes",3]],null,null,null,null,[[],["lifetimesmut",3]],null,null,null,null,null,null,null,[[],["whereclause",3]],null,null,null,null,null,null,null,null,[[["span",3],["str",15]]],[[["lifetime",3]]],[[["literal",3]]],[[["span",3],["str",15]]],[[["span",3]]],[[["span",3],["u8",15]]],[[["span",3],["char",15]]],[[["span",3],["str",15]]],[[["span",3],["str",15]]],[[["span",3],["bool",15]]],[[["span",3],["str",15]],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]],[["result",6],["parse",8]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["result",6],["parse",8]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["tokenstream",3]],[["result",6],["parse",8]]],[[["parsestream",6]],["result",6]],[[],[["result",6],["parse",8]]],[[["parser",8]],["result",6]],[[],[["result",6],["parse",8]]],[[["parser",8]],["result",6]],[[["parsestream",6]],[["vec",3],["result",6]]],null,[[],[["meta",4],["result",6]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],[["vec",3],["result",6]]],null,[[["str",15]],[["result",6],["parse",8]]],[[["parsestream",6]],["result",6]],[[["parser",8]],["result",6]],[[["lifetime",3]],[["option",4],["ordering",4]]],[[["ident",3]],[["option",4],["ordering",4]]],[[],["path",3]],null,null,null,null,null,null,null,null,[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],[["span",3],["option",4]]],[[],[["span",3],["option",4]]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],[["span",3],["option",4]]],null,null,null,[[]],null,null,null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeparams",3]],[[],["typeparamsmut",3]],null,null,null,[[],["ident",3]],null,[[],["string",3]],[[],[["vec",3],["u8",15]]],[[],["u8",15]],[[],["char",15]],[[],["bool",15]],null,null,null,null,null,null,null,[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],null,null,[[],["cursor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["delimiter",4]],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["tokenstream",3]],["tokenbuffer",3]],[[["tokenstream",3]],["tokenbuffer",3]],[[],["option",4]],[[],["span",3]],[[]],[[],["tokenstream",3]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["parsestream",6]],["result",6]],null,[[],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[]],[[["error",3]]],[[],["cursor",3]],[[]],null,[[]],[[],["error",3]],[[["display",8]],["error",3]],[[["display",8]],["error",3]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lexerror",3]]],[[]],[[]],[[]],[[]],[[]],[[],["tokenstream",3]],[[]],[[],["bool",15]],[[],["lookahead1",3]],[[["span",3],["display",8]]],[[["totokens",8],["display",8]]],[[["parsestream",6]],["result",6]],[[],[["result",6],["parse",8]]],[[["tokenstream",3]],["result",6]],[[["parsestream",6]],["result",6]],[[["tokenstream",3]],["result",6]],[[["str",15]],["result",6]],[[],[["result",6],["punctuated",3]]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[],["span",3]],[[],["span",3]],[[],["result",6]],[[],["tokenstream",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intopairs",3]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["pairs",3]],[[],["pairsmut",3]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["option",4],["pair",4]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["span",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullstr",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["strparsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstreamtokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"BinOp"],[4,"PathArguments"],[4,"Expr"],[4,"Type"],[4,"GenericArgument"],[4,"Lit"],[4,"MacroDelimiter"],[4,"GenericParam"],[4,"StrStyle"],[4,"Visibility"],[4,"ReturnType"],[4,"UnOp"],[4,"Data"],[4,"WherePredicate"],[4,"AttrStyle"],[4,"TypeParamBound"],[4,"Meta"],[4,"NestedMeta"],[4,"TraitBoundModifier"],[4,"Fields"],[4,"Member"],[3,"TypeBareFn"],[3,"TypeReference"],[3,"Lifetime"],[3,"ExprCall"],[3,"AngleBracketedGenericArguments"],[3,"PathSegment"],[3,"ExprCast"],[3,"QSelf"],[3,"TypeGenerics"],[3,"Variant"],[3,"Field"],[3,"ExprBinary"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"DeriveInput"],[3,"BareFnArg"],[3,"Variadic"],[3,"Macro"],[3,"TypeNever"],[3,"LitInt"],[3,"LitFloat"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprLet"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[3,"Generics"],[3,"BoundLifetimes"],[3,"TraitBound"],[3,"WhereClause"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[3,"TypeArray"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"Path"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Ident"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[8,"Parser"],[3,"ParseBuffer"],[3,"Lookahead1"],[3,"StepCursor"],[3,"Nothing"],[3,"Error"],[8,"Parse"],[8,"Speculative"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Spanned"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","t":[17,8,10,10],"n":["UNICODE_VERSION","UnicodeXID","is_xid_continue","is_xid_start"],"q":["unicode_xid","","",""],"d":["The version of Unicode that this version of unicode-xid …","Methods for determining if a character is a valid …","Returns whether the specified <code>char</code> satisfies the ‘…","Returns whether the specified character satisfies the ‘…"],"i":[0,0,1,1],"f":[null,null,[[],["bool",15]],[[],["bool",15]]],"p":[[8,"UnicodeXID"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};