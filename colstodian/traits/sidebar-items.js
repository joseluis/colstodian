initSidebarItems({"trait":[["AlphaState","A type that implements this trait represents a color’s alpha state."],["AsU8","A type that implements this trait can be converted directly to and from the associated `u8` based color types ([`ColorU8`] and [`ColorU8Alpha`])"],["ColorAlphaConversionQuery","A “conversion query” for a [`ColorAlpha`][crate::ColorAlpha]."],["ColorConversionQuery","A “conversion query” for a [`Color`][crate::Color]."],["ColorInto","A trait meant to be used as a replacement for [`Into`] in situations where you want to bound a type as being able to be converted into a specific type of color. Because of how `colstodian` works and how [`From`]/[`Into`] are implemented, we can’t use them directly for this purpose."],["ColorSpace","A type that implements ColorSpace represents a specific color space. See the documentation of [`DynamicColorSpace`] for more information about what a color space is."],["ConvertFromAlphaRaw","Performs the conversion from [alpha state][AlphaState] `SrcAlphaState` into `Self` on a raw color."],["ConvertFromRaw","Performs the raw conversion from the [`ColorSpace`] represented by `SrcSpc` to the [`ColorSpace`] represented by `Self` in three concrete steps, each of which may do some work or be a no-op."],["ConvertToAlphaRaw","The complement of [`ConvertFromAlphaRaw`]. Performs the conversion from [alpha state][AlphaState] `Self` into `DstAlphaState` on a raw color."],["ConvertToRaw","The complement of [`ConvertFromRaw`]."],["EncodedColorSpace","Marks a type as representing an encoded color space."],["LinearColorSpace","Marks a type as representing a linear color space."],["NonlinearColorSpace","Marks a type as representing a nonlinear color space."],["State","A type that implements this trait represents a color’s State."],["WorkingColorSpace","Marks a type as representing a color space that is not [encoded][EncodedColorSpace] and is therefore able to have many more operations performed on it."]]});