initSidebarItems({"enum":[["ColorError","Any error which can occur within the library."],["DynamicAlphaState","A dynamic version of a color’s alpha state. See docs for [`AlphaState`]"],["DynamicState","A dynamic version of a color’s state. See docs for [`State`]"]],"macro":[["const_color",""],["const_color_alpha",""]],"mod":[["alpha_states","Contains types relating to a color’s alpha state."],["color","Contains color types and helper functions."],["component_structs","Structs that act as bags of named components which [`Color`][super::Color]s of different color spaces may be `Deref`erenced to in order to gain more appropriate dot syntax for that color space."],["error","Error handling types."],["spaces","Types representing different color spaces."],["states","Contains types relating to a color’s state."],["tonemap","Contains tonemappers, useful for mapping scene-referred HDR values into display-referred values within the concrete dynamic range of a specific display."],["traits","The traits which form the backbone of the strongly-typed [`Color`] & [`ColorAlpha`]."]],"struct":[["Color","A strongly typed color, parameterized by a color space and state."],["ColorAlpha","A strongly typed color with an alpha channel, parameterized by a color space, state, and alpha state."],["ColorU8","An encoded color, 8-bit per component, 24-bit total."],["ColorU8Alpha","An encoded color with alpha, 8-bit per component, 32-bit total."],["Display","Encodes that a color is [`Display`]-referred (in the range [0..1], defined in relation to a display standard)."],["DynamicColorSpace","A color space defined in data by its [Primaries][RGBPrimaries], [white point][WhitePoint], and an optional [invertible transform function][TransformFn]."],["Premultiplied","Encodes that a color’s component values have been premultiplied with its alpha channel."],["Scene","Encodes that a color is [`Scene`]-referred (in the range [0..inf)), defined in relation to input values from a (virtual) camera or other input device. Usually representing something like radiance in an HDR rendering pipeline."],["Separate","Encodes that a color’s component values are completely separate from its alpha channel."]],"trait":[["AlphaState","A type that implements this trait represents a color’s alpha state."],["ColorInto","A trait meant to be used as a replacement for [`Into`] in situations where you want to bound a type as being able to be converted into a specific type of color. Because of how `colstodian` works and how [`From`]/[`Into`] are implemented, we can’t use them directly for this purpose."],["ColorSpace","A type that implements ColorSpace represents a specific color space. See the documentation of [`DynamicColorSpace`] for more information about what a color space is."],["State","A type that implements this trait represents a color’s State."]],"type":[["ColorResult",""]]});